<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tool on ツイートするには長すぎる</title><link>https://blog.nfurudono.com/tags/tool/</link><description>Recent content in Tool on ツイートするには長すぎる</description><generator>Hugo</generator><language>ja</language><copyright>&amp;copy;{currentYear} Naoya Furudono</copyright><lastBuildDate>Wed, 01 Jan 2025 21:39:11 +0900</lastBuildDate><atom:link href="https://blog.nfurudono.com/tags/tool/index.xml" rel="self" type="application/rss+xml"/><item><title>2025-01-01</title><link>https://blog.nfurudono.com/daily/2025-01-01/</link><pubDate>Wed, 01 Jan 2025 21:38:06 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2025-01-01/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 家の鍋とフライパンのサイズを知りたい。せいろを買おうと思ったがサイズを選べなかったので。&lt;/li>
&lt;/ul></description></item><item><title>2024-12-15</title><link>https://blog.nfurudono.com/daily/2024-12-15/</link><pubDate>Sun, 15 Dec 2024 14:46:40 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-15/</guid><description>&lt;h2>
&lt;a href="#filter%e3%81%abasync%e3%82%92%e6%b8%a1%e3%81%97%e3%81%a6%e3%81%af%e3%81%84%e3%81%91%e3%81%aa%e3%81%84" id="filterにasyncを渡してはいけない" class="anchor" aria-hidden="true">filterにasyncを渡してはいけない&lt;/a>
&lt;/h2>
&lt;p>日記はマークダウンで書いていて、タイトルとか公開・非公開とかはフロントマターに書いている。それをパースしてよしなに処理してHTMLに落としたり、そもそも公開しないようにしている。それらの処理はTSで書いている。&lt;/p></description></item><item><title>2024-12-13</title><link>https://blog.nfurudono.com/daily/2024-12-13/</link><pubDate>Fri, 13 Dec 2024 20:11:32 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-13/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> kamakura.goの感想とかを書く&lt;/li>
&lt;/ul>
&lt;!--
# kamakura.goで発表した

https://kamakurago.connpass.com/event/336353/

https://x.com/fujiwara/status/1867533095584641426 たまたま？ カヤック3名 v.s. ペパボ3名だったみたい。

「Protocol Buffersスキーマ定義から GoのCLIを生成する」というタイトルでお話をした。
スライドは https://speakerdeck.com/naoyafurudono/protocol-bufferssukimading-yi-kara-gonocliwosheng-cheng-suru に公開してある。

最初にバッチとして実装しておいて、後からhttpを喋ってストリーミング処理できるようにしたいと思うことがあってそれにハマりそうという感想をいただいた。

## kongはいいぞ

https://x.com/fujiwara/status/1867517006532260316
--></description></item><item><title>2024-12-12</title><link>https://blog.nfurudono.com/daily/2024-12-12/</link><pubDate>Thu, 12 Dec 2024 01:52:31 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-12/</guid><description>&lt;blockquote>
&lt;p>We recommend that all third-party code generators be written as plugins, as this allows all generators to provide a consistent interface and share a single parser implementation.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://protobuf.dev/reference/other/#plugins">https://protobuf.dev/reference/other/#plugins&lt;/a>&lt;/p>
&lt;p>はえ〜って感じ。Goのライブラリはだいぶ使い勝手良かったのでまあ確かにと思ってる。&lt;/p></description></item><item><title>2024-12-05</title><link>https://blog.nfurudono.com/daily/2024-12-05/</link><pubDate>Thu, 05 Dec 2024 22:58:31 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-05/</guid><description>&lt;p>viperってinit使わないといけないのかな。
viperに依存性を注入するような使い方をしたい。Facadeを受け取ってCLIを返すようなCLIジェネレータを定義しようとしていて、CLIジェネレータを実装するためにviperの諸々をinitとかで終えようと思うと困る。実行時にfacadeを入れたいので。&lt;/p></description></item><item><title>2024-11-27</title><link>https://blog.nfurudono.com/daily/2024-11-27/</link><pubDate>Wed, 27 Nov 2024 19:19:42 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-27/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://incepter.github.io/how-react-works/">https://incepter.github.io/how-react-works/&lt;/a> これ面白そうなので読む。定期的にくるReactの仕組みを深掘りしたくなる時期。&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> ブログのMakefileを書く&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#branded-type%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f" id="branded-typeを使ってみた" class="anchor" aria-hidden="true">Branded typeを使ってみた&lt;/a>
&lt;/h2>
&lt;p>Branded typeはTSでnominal typingっぽいことをするためのプログラミングテクニックの一つ。&lt;a href="https://zenn.dev/okunokentaro/articles/01gmpkp9gzfyr1za5wvrxt0vy6#branded-types">Branded Typesを導入してみる / TypeScript一人カレンダー&lt;/a> が詳しい。&lt;/p></description></item><item><title>2024-11-25</title><link>https://blog.nfurudono.com/daily/2024-11-25/</link><pubDate>Mon, 25 Nov 2024 20:02:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-25/</guid><description>&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> それぞれの記事に「次の記事」と「前の記事」へのリンクをつける
&lt;ul>
&lt;li>記事のレンダリングとは別にページの属性として前後の記事のURLかパスを持たせるように、テンプレートみたいにすると良い。計算フェーズを分ける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>2024-11-20</title><link>https://blog.nfurudono.com/daily/2024-11-20/</link><pubDate>Wed, 20 Nov 2024 23:41:11 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-20/</guid><description>&lt;h2>
&lt;a href="#%e3%82%b9%e3%82%ad%e3%83%bc%e3%83%9e%e9%a7%86%e5%8b%95cli%e3%83%84%e3%83%bc%e3%83%ab%e9%96%8b%e7%99%ba%e3%82%92%e6%94%af%e6%8f%b4%e3%81%99%e3%82%8b%e3%83%84%e3%83%bc%e3%83%ab%e3%82%92proto%e3%81%ab%e4%b9%97%e3%81%a3%e3%81%8b%e3%81%a3%e3%81%a6%e4%bd%9c%e3%82%8a%e3%81%9f%e3%81%84" id="スキーマ駆動cliツール開発を支援するツールをprotoに乗っかって作りたい" class="anchor" aria-hidden="true">スキーマ駆動CLIツール開発を支援するツールをprotoに乗っかって作りたい&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> proto2cliを実装する
&lt;ul>
&lt;li>やった
&lt;ul>
&lt;li>zennに紹介記事を書いた &lt;a href="https://zenn.dev/nfurudono/articles/719e3aafac6065">https://zenn.dev/nfurudono/articles/719e3aafac6065&lt;/a>&lt;/li>
&lt;li>kamakura.go #7で発表した &lt;a href="https://kamakurago.connpass.com/event/336353/">https://kamakurago.connpass.com/event/336353/&lt;/a>
&lt;ul>
&lt;li>スライドはこれ &lt;a href="https://speakerdeck.com/naoyafurudono/protocol-bufferssukimading-yi-kara-gonocliwosheng-cheng-suru">https://speakerdeck.com/naoyafurudono/protocol-bufferssukimading-yi-kara-gonocliwosheng-cheng-suru&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>まだ本番環境に組み込めてないのと、機能開発とか開発環境の整備ができていない。やる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>名前を決める：connectはブラウザやgRPCと互換性のあるAPIを提供するのに必要なボイラープレートが必要なのを軽減してくれるやつ。
&lt;ul>
&lt;li>これはそれらにCLIをインターフェースとして加える。つまりローカルから、サーバを立てる事なく実行できるようにする。そういう立ち位置がいい。単にインターフェースを一個加えるだけ。実装はできるだけシェアしたい。&lt;/li>
&lt;li>まずはconnectを採用するアプリケーションを一個用意して、それにCLIを入れる。ここで上手い入れ方を探る&lt;/li>
&lt;li>次にその入れる作業を自動化する。そのためのCLIがproto2cli&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サブコマンドでサービス、位置引数でメソッド、フラグ引数(&lt;code>-d&lt;/code>)でリクエストメッセージを受け取る。
&lt;ul>
&lt;li>サブコマンドと位置引数は最初は特に区別しなくていいか。 &lt;code>cmd &amp;lt;service&amp;gt; &amp;lt;method&amp;gt; -d &amp;lt;request message json&amp;gt;&lt;/code> の形式で呼び出すだけ。&lt;/li>
&lt;li>CLIへの入力はそのままサービス名、メソッド名、リクエストメッセージがそれぞれbyte列かstringのどちらかで得られる。それらをなんとかするのは一旦別のコンポーネントの役割にしよう&lt;/li>
&lt;li>ここまでは普通にflagsパッケージとかを使うだけでいける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>次にリクエストメッセージのデコードを自動化する。
&lt;ul>
&lt;li>&lt;code>func unmarshalRPC(service, method, req string) (MessageInterface, error)&lt;/code>
&lt;ul>
&lt;li>対応する型のunmarshellerへのディスパッチとその呼び出しが責務&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>dispatchUnMarshelelr(service, method string) (func(byte[], MessageInterface) error, error)&lt;/code>
&lt;ul>
&lt;li>ディスパッチだけでも良さそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>次に、サービスの呼び出しを行う
&lt;ul>
&lt;li>connect サーバをclient経由で呼び出す&lt;/li>
&lt;li>単にサービスを呼び出す
&lt;ul>
&lt;li>インターセプタを通過できない、特にproto validateを通せない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>インターセプタとサービスを合成する
&lt;ul>
&lt;li>できればhttpサーバの仕組みに乗っかりたい&lt;/li>
&lt;li>でも無理がありそう、intercepter (unaryfunc) を受け入れてデコレートする感じにしそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以下のようなprotoスキーマを定義する。&lt;/p></description></item><item><title>2024-11-13</title><link>https://blog.nfurudono.com/daily/2024-11-13/</link><pubDate>Wed, 13 Nov 2024 19:02:20 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-13/</guid><description>&lt;p>fzfで表示される選択肢と選択した結果得られる値を分けられるようにしたいので作った。
yamlでkey-valueペアのリストを保持しておいて、そのキーの選択をfzfで行い、得られる値はvalueである、みたいな感じ。&lt;/p></description></item><item><title>2024-10-27</title><link>https://blog.nfurudono.com/daily/2024-10-27/</link><pubDate>Sun, 27 Oct 2024 01:20:03 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-27/</guid><description>&lt;h2>
&lt;a href="#%e7%b5%90%e5%a9%9a%e5%bc%8f%e6%ba%96%e5%82%99" id="結婚式準備" class="anchor" aria-hidden="true">結婚式準備&lt;/a>
&lt;/h2>
&lt;p>友達の結婚式に今度出席するので真面目に準備してみる。普段スーツを着ないので礼服を着るのはコスプレみたいでドキドキする。&lt;/p></description></item><item><title>2024-10-26</title><link>https://blog.nfurudono.com/daily/2024-10-26/</link><pubDate>Sat, 26 Oct 2024 22:50:25 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-26/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> aboutページの収取をするプラグインを実装して組み込んだ。あとはそれをいい感じに表示する必要がある&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 今度人の結婚式に出るので身だしなみとか常識を身につける・髪切るとか服を用意する計画を立てる
&lt;ul>
&lt;li>受付やるらしいのでちゃんとした方が良さそう&lt;/li>
&lt;li>礼服着れるか確認しておくか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> helm完全に理解する。リリースとか意味わからん。installって何？kubectl applyとの関係は？&lt;/li>
&lt;/ul></description></item><item><title>2024-10-16</title><link>https://blog.nfurudono.com/daily/2024-10-16/</link><pubDate>Wed, 16 Oct 2024 01:15:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-16/</guid><description>&lt;h2>
&lt;a href="#%e8%aa%ad%e6%9b%b8%e3%83%a1%e3%83%a2" id="読書メモ" class="anchor" aria-hidden="true">読書メモ&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://browser.engineering/intro.html#browser-code-concepts">https://browser.engineering/intro.html#browser-code-concepts&lt;/a> 以前まで読んだ。このセクションから再開する。&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e3%83%96%e3%83%ad%e3%82%b0%e9%96%8b%e7%99%ba%e3%82%a2%e3%82%a4%e3%83%87%e3%82%a2" id="ブログ開発アイデア" class="anchor" aria-hidden="true">ブログ開発アイデア&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> トピックをセクションのタイトル (hN要素) で宣言して、それを集約したページを勝手に生成するようにしたい。
&lt;ul>
&lt;li>&lt;code>about:&amp;lt;TOPIC_NAME&amp;gt; &amp;lt;TEXT&amp;gt;&lt;/code> という名前のタイトルをヘッダにつけたら、&lt;code>/topic/&amp;lt;TOPIC_NAME&amp;gt;&lt;/code> というページを生成して、　　そこに &lt;code>&amp;lt;TEXT&amp;gt; - &amp;lt;DATE&amp;gt;&lt;/code> みたいな名前のセクションを埋め込みたい。元記事へのパーマリンクも添えておくと良さそう。&lt;/li>
&lt;li>読書記録に使えそう&lt;/li>
&lt;li>その他にも普通のブログではタグを記事につけるようなノリで使うのも可能。記事の単位だとタグによる分類は不便に思うのだけど、セクションくらいの粒度ならつけるときも読む時もちょうど良いだろうと思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e4%bb%8a%e3%81%ae%e7%92%b0%e5%a2%83%e3%81%a0%e3%81%a8%e6%af%94%e8%bc%83%e7%9a%84%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%8c%e5%be%97%e6%84%8f%e3%81%8b%e3%82%82%e3%81%97%e3%82%8c%e3%81%aa%e3%81%84%e3%81%a8%e6%80%9d%e3%81%86%e3%82%88%e3%81%86%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%8d%e3%81%9f" id="今の環境だと比較的プログラミングが得意かもしれないと思うようになってきた" class="anchor" aria-hidden="true">今の環境だと比較的プログラミングが得意かもしれないと思うようになってきた&lt;/a>
&lt;/h2>
&lt;p>エンジニアリングの中ではプログラミングは割と得意なのかもしれないとここ１ヶ月くらいでなんとなく思うようになった。こういうプログラムの構成の方が良くない？みたいなことを理由込みでそれなりに説明・提案できることが周囲より多そうな気がしてきたので。&lt;/p></description></item><item><title>2024-10-15</title><link>https://blog.nfurudono.com/daily/2024-10-15/</link><pubDate>Tue, 15 Oct 2024 00:40:12 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-15/</guid><description>&lt;h2>
&lt;a href="#%e8%a6%8b%e5%87%ba%e3%81%97%e3%81%abid" id="見出しにid" class="anchor" aria-hidden="true">見出しにid&lt;/a>
&lt;/h2>
&lt;p>見出しにidを振るようにした。
idが振られている要素に対するCSSとクリックでリンクをクリップボードに貼り付ける実装と相まっていい感じ。やったね。パーマリンクは意味のある単位ごとに簡単に取れるべきだと信仰している。なのでハッピー。&lt;/p></description></item><item><title>2024-10-10</title><link>https://blog.nfurudono.com/daily/2024-10-10/</link><pubDate>Thu, 10 Oct 2024 19:29:06 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-10/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> protobufとかsqlcでファイル生成をするツールを使ってチーム開発をしているとすごくコンフリクトして辛い。生成するファイルを分割して、例えばrpcとかmessage単位にファイル（パッケージではない！）を分ければgitのコンフリクトは避けられる。パッケージも一緒なので振る舞いには影響しない。&lt;/li>
&lt;/ul></description></item><item><title>2024-09-18</title><link>https://blog.nfurudono.com/daily/2024-09-18/</link><pubDate>Wed, 18 Sep 2024 00:00:00 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-09-18/</guid><description>&lt;p>日記からtodo一覧を抽出して専用ページにtodoアイテムとその文脈を列挙する機能を実装した。この手の機能はtodoに限らず文章で考えや記録をつける人を幸せにするだろう。&lt;/p></description></item><item><title>2024-09-16</title><link>https://blog.nfurudono.com/daily/2024-09-16/</link><pubDate>Mon, 16 Sep 2024 02:20:29 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-09-16/</guid><description>&lt;h2>
&lt;a href="#%e4%bb%8a%e6%97%a5%e3%82%84%e3%82%8b%e3%81%93%e3%81%a8" id="今日やること" class="anchor" aria-hidden="true">今日やること&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 掃除
&lt;ul>
&lt;li>ルンバを起動したのでok&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 外出
&lt;ul>
&lt;li>電車乗るくらいの外出をする。秋物出たかな。あるいは外で使うと幸せになれるグッツを買うか。&lt;/li>
&lt;li>ランニングパンツと靴下を買う。帰省でランニングのズボンを置いてきたのと、靴下が大体ボロボロになってきたので。&lt;/li>
&lt;li>靴下は買った。ランニングパンツはまあいっかと思って買わず。そのほかに秋に向けて服を見たけどピンと来なかったので特に買わずだった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 本読む。k8sのあれ。あとは認証の技術気になるので学ぶ。認可も気になる。
&lt;ul>
&lt;li>SSL&lt;/li>
&lt;li>ドメイン&lt;/li>
&lt;li>k8sのRBAC&lt;/li>
&lt;li>選ばれたのはカスタムコントローラでした。ググって見つけたyahooの人のスライドが概要を掴むのにいい感じだった。
&lt;ul>
&lt;li>&lt;a href="https://speakerdeck.com/hhiroshell/platform-engineering-and-kubernetes">https://speakerdeck.com/hhiroshell/platform-engineering-and-kubernetes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> todoをリストアップする拡張の実装&lt;/li>
&lt;li>&lt;del>todoの拡張、出先でチェック入れたくなりそうなので、githubでの編集へのリンクをつけたい&lt;/del>
&lt;ul>
&lt;li>やっぱりいいや。出先ではのんびりしよう。todoのことなんて忘れればいい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#todo%e3%82%92%e3%83%aa%e3%82%b9%e3%83%88%e3%82%a2%e3%83%83%e3%83%97%e3%81%99%e3%82%8b%e3%83%9a%e3%83%bc%e3%82%b8%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%97%e3%81%9f" id="todoをリストアップするページを実装した" class="anchor" aria-hidden="true">todoをリストアップするページを実装した&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://diary.nfurudono.com/todos/">https://diary.nfurudono.com/todos/&lt;/a>に実装した。これでもう過去のtodoを忘れない。収集とレンダリングの両方が必要でだるかった。特にレンダリングはunifiedのアーキテクチャを理解してなくて手間取った。今の実装がunifiedのアーキテクチャに沿っているか自信がない。&lt;/p></description></item><item><title>2024-09-15</title><link>https://blog.nfurudono.com/daily/2024-09-15/</link><pubDate>Sun, 15 Sep 2024 16:37:31 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-09-15/</guid><description>&lt;h2>
&lt;a href="#%e8%87%aa%e4%bd%9c%e6%9c%ac%e6%a3%9a2%e6%9c%ac%e7%9b%ae" id="自作本棚2本目" class="anchor" aria-hidden="true">自作本棚2本目&lt;/a>
&lt;/h2>
&lt;p>本棚を作った。2本目だけどすでに飽きてきた。慣れから余裕が出てきたことである程度精度が悪くても問題ないことに気がついてしまったところで敗北していて、「はいはい大体こんな感じでしょ」って作業になったのであまり楽しくなかった。今もさっさと油乾かないかなとか考えてる。改善の余地はあるのだろうが、前回作ったものが問題なく動いている（本棚なので動かないけど）し、物に満足しているのでまあこれでいいでしょとなってる。おかげで作業速度は改善していて、多分倍速くらいになった。でも幸せかというとなかなか&amp;hellip;。&lt;/p></description></item><item><title>Goのanalysisとtypesに入門する</title><link>https://blog.nfurudono.com/posts/go-static-analysis/</link><pubDate>Sat, 31 Aug 2024 15:02:41 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-static-analysis/</guid><description>&lt;h2>
&lt;a href="#%e6%a6%82%e8%a6%81" id="概要" class="anchor" aria-hidden="true">概要&lt;/a>
&lt;/h2>
&lt;p>Goで静的解析してリンターを実装したい。具体的には、あるT1インターフェース型の変数がスコープにあるときは、T1よりゆるい任意の型の使用を禁止する、みたいな制約を入れたい。その辺に転がっている記事ではASTを覗いてみたり、SSAを覗いてみたりするようだけど、ASTとその型をまともに扱っていつつ、いい感じに静的解析ツールとして仕上げる記事を見つけられなかった。&lt;/p></description></item><item><title>2024-08-21</title><link>https://blog.nfurudono.com/daily/2024-08-21/</link><pubDate>Wed, 21 Aug 2024 00:48:04 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-08-21/</guid><description>&lt;h2>
&lt;a href="#zed%e3%81%8c%e8%89%af%e3%81%84" id="zedが良い" class="anchor" aria-hidden="true">Zedが良い&lt;/a>
&lt;/h2>
&lt;p>Zedエディタをずっと使っている。nvimを使う機会は無くなったと思う。ぼくにとってnvimを使うのは起動が爆速なvimモードで編集できるエディタであることだけがモチベーションだった。
Zedがそれをほぼカバーしているので、慣れとか不満をまとめることを目的としてZedを使うことにした。&lt;/p></description></item><item><title>2024-08-15</title><link>https://blog.nfurudono.com/daily/2024-08-15/</link><pubDate>Thu, 15 Aug 2024 15:04:52 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-08-15/</guid><description>&lt;p>日記をnextjsでビルドして、cloudflare pagesにデプロイするようにした。cnameの設定が効くようになれば、&lt;a href="https://diary.nfurudono.com">https://diary.nfurudono.com&lt;/a>から見えるようになるはず。&lt;/p>
&lt;p>cloudflareのアカウントを初めて作って設定したが、体験よかった。デプロイとか周りの開発のためにCLIツールやそれのgithub actionsバインディングが提供されていて、サクッとデプロイできた。記念すべき初デプロイの成功をメモしておく&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/actions/runs/10399555684/job/28798614059">https://github.com/naoyafurudono/naoyafurudono.github.io/actions/runs/10399555684/job/28798614059&lt;/a>&lt;/p></description></item><item><title>Neovimにlazyを入れてプラグイン管理することにした</title><link>https://blog.nfurudono.com/posts/lazy-nvim/</link><pubDate>Tue, 13 Aug 2024 12:27:07 +0900</pubDate><guid>https://blog.nfurudono.com/posts/lazy-nvim/</guid><description>&lt;p>これまで特にプラグインを使っていなかった（それくらいで済む用途にしか使っていなかった）のだけど、カラースキームを指定したくなったのでプラグインマネージャを入れた。&lt;/p></description></item><item><title>2024-08-12</title><link>https://blog.nfurudono.com/daily/2024-08-12/</link><pubDate>Mon, 12 Aug 2024 22:51:04 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-08-12/</guid><description>&lt;p>vimの &lt;code>sort&lt;/code> コマンドを知った。設定ファイル書くときとかの、気持ち並び替えておきたいところに使えて便利。&lt;/p>
&lt;p>週末は帰省して、さらに親の実家に行き親戚に会ってきた。いとこの子供にジュースをたかられて甘やかす体験を初めてした。あんなに食べて大丈夫かと思うほどよく食べる。&lt;/p></description></item><item><title>AHK入門</title><link>https://blog.nfurudono.com/posts/ahk/</link><pubDate>Sun, 28 Jul 2024 01:41:34 +0900</pubDate><guid>https://blog.nfurudono.com/posts/ahk/</guid><description>&lt;p>Windowsマシンでキーボード操作が不便なので導入する。悪態をつきながらも使っている人を知っているので内容を理解していないが期待している。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" id="インストール" class="anchor" aria-hidden="true">インストール&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.autohotkey.com/">https://www.autohotkey.com/&lt;/a> 公式ページからバイナリを落とせる。インストールするとwelcome画面が開いたのだが、そこに「コンパイルする」ボタンがあって、ちょっと不安になる。僕はプログラムをボタンを押してコンパイルしないといけない？&lt;/p></description></item><item><title>2024-07-06</title><link>https://blog.nfurudono.com/daily/2024-07-06/</link><pubDate>Sat, 06 Jul 2024 23:45:10 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-07-06/</guid><description>&lt;h2>
&lt;a href="#%e6%9c%ac%e6%a3%9a%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%84%e3%82%8b" id="本棚を作っている" class="anchor" aria-hidden="true">本棚を作っている&lt;/a>
&lt;/h2>
&lt;p>先週くらいに調査をした上で今日材料と道具を買ってきて、加工のための準備をしている。誤差は出るものとして、それを許容できる加工方法を考えるのが楽しいしめんどい。&lt;/p></description></item><item><title>2024-06-25</title><link>https://blog.nfurudono.com/daily/2024-06-25/</link><pubDate>Tue, 25 Jun 2024 01:24:44 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-06-25/</guid><description>&lt;p>本棚を自作する。&lt;a href="https://www.todaproduction.com/books/bkshelf/bkfrm.htm">清く正しい本棚の作り方&lt;/a>が参考になりそうなので通読する。&lt;/p>
&lt;p>通読した。以下の手順かな。今度ホームセンター行こう。&lt;/p>
&lt;ul>
&lt;li>材料の検討をつける
&lt;ul>
&lt;li>21mm以上の厚さでカット可能でそれなりのサイズの板が必要&lt;/li>
&lt;li>パイン集製剤はよさそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>設計する
&lt;ul>
&lt;li>自分の本のサイズとその量を見積もるかな&lt;/li>
&lt;li>僕の場合は専門書が3サイズ（A5?,A4?,教科書？）あるのと小説と漫画がある。それぞれのサイズを計り量を見積もる&lt;/li>
&lt;li>その上で高さ180cmくらいかなのものを一旦設計して、入手できる材料のサイズを鑑みて調整する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>材料を調達する
&lt;ul>
&lt;li>購入・裁断・運び入れが課題&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>組み立て
&lt;ul>
&lt;li>補助線の書き込みと穴あけ、ねじ止めとボンドでの固定がやること&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>研磨
&lt;ul>
&lt;li>エッジの処理とかはこのタイミングで一度やる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>塗装
&lt;ul>
&lt;li>材料によるがニスとかでいいかな&lt;/li>
&lt;li>蜜蝋とか油は本への影響がありそうでちょっと怖い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>乾かす
&lt;ul>
&lt;li>塗料が乾くまで外で乾かす。天気が大切&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>研磨
&lt;ul>
&lt;li>最後にシュッとやれるとよさそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!--
# モノレポの話

## 一個め

- 開発環境一発で立ち上げたいのは本当にそう
- codeownerとsentryを連携するとかもあるとのこと。運用にモノレポを効かせられる
- gradleのビルドキャッシュをCIサーバからローカルに落とせる。テストもそこに含める。テストの単位ってどうなっているんだろう
- ドメイン境界でモジュールを分割して依存関係を作り上げるなるほど
- 依存関係のグラフを見るのはやってみて良さそう
- ドメイン境界を見つけるために試行錯誤で変化するための基盤としてのモノレポなるほど

## カミナシ

- 管理者のWeb (React)
- ユーザのモバイル (React Natibe)j

- `node_modules` を共有してて辛い
 - ここを分離できてればカミナシでもいけたかも
- 依存関係の管理がうまく行ってなかった。
- Webとモバイルを一緒にリリースしていて細かくリリースできなかったとのこと
- `api_packages` (openAPI定義)をクライアントでしか使ってなかった。これをサーバに移した
 - gitのsubtree mergeを使った
 - npmパッケージをサーバでのopenAPI定義の更新の度にデプロイするようにした

## アソビュー

- https://www.google.com/search?q=advantages+and+disadvantages+of+a+monorithic+repo&amp;oq=advantages+and+disadvantages+of+a+monorithic+repo&amp;gs_lcrp=EgZjaHJvbWUyBggAEEUYOdIBCTE2NzgwajBqN6gCALACAA&amp;sourceid=chrome&amp;ie=UTF-8
- 認知負荷の低下をメリットとして挙げがち
- 技術的課題というより文化の問題は確かに
- 移行のために haraban/tomonoを使った
- feature flagや自動テスト足した
 - feature flagの使い方きのさんな
--></description></item><item><title>RubyKaigi2024参加メモ</title><link>https://blog.nfurudono.com/posts/rubykaigi2024/</link><pubDate>Sat, 18 May 2024 18:51:00 +0900</pubDate><guid>https://blog.nfurudono.com/posts/rubykaigi2024/</guid><description>&lt;p>RubyKaigi2024に参加したので、思ったことをメモしておきます。&lt;/p>
&lt;p>参加したセッションはこちら: &lt;a href="https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3">https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3&lt;/a>&lt;/p>
&lt;h2>
&lt;a href="#shopify%e3%81%8c%e3%81%99%e3%81%94%e3%81%84" id="shopifyがすごい" class="anchor" aria-hidden="true">shopifyがすごい&lt;/a>
&lt;/h2>
&lt;p>今回のセッションをいくつか聞いてShopifyのやり方に憧れるようになった。エンジニアリングをしていく上での姿勢として、課題に対して上流から対処しよう、みたいな箴言があってそれが心に残っている。
ShopifyのRuby周りのチームはまさにそれを地で行っていると今回のセッションを聞いて感じたそういうチームに所属して（作って？）良いエンジニアリングをしていきたいと思っていたのだが、これまでは具体的なイメージいを持っていなかった。&lt;/p></description></item><item><title>hugoで多言語対応始めた</title><link>https://blog.nfurudono.com/posts/multi-lang-on-hugo/</link><pubDate>Thu, 18 Apr 2024 01:51:54 +0900</pubDate><guid>https://blog.nfurudono.com/posts/multi-lang-on-hugo/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/commit/b4966a3e96c2a8131da6d623cef85df5c97439ba">https://github.com/naoyafurudono/naoyafurudono.github.io/commit/b4966a3e96c2a8131da6d623cef85df5c97439ba&lt;/a>
このコミットみたいな感じで設定したりファイル名を変えたりすると、いい感じにパスを掘ってくれる。&lt;/p>
&lt;p>パスを掘ってくれる以外のメリットは知らない。&lt;/p></description></item><item><title>Nextjsのプロジェクトにstorybookを導入してみた</title><link>https://blog.nfurudono.com/posts/install-storybook-next/</link><pubDate>Tue, 26 Mar 2024 01:51:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/install-storybook-next/</guid><description>&lt;h2>
&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8" id="やったこと" class="anchor" aria-hidden="true">やったこと&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/timer/pull/1">https://github.com/naoyafurudono/timer/pull/1&lt;/a>&lt;/p>
&lt;p>このプルリクエストで頑張った。コミットメッセージにやったことは書いてある。&lt;/p>
&lt;h2>
&lt;a href="#%e5%8f%82%e8%80%83" id="参考" class="anchor" aria-hidden="true">参考&lt;/a>
&lt;/h2>
&lt;p>公式ドキュメントがしっかりしてそう。storybookが内部で使っているwebpackが&lt;code>@&lt;/code> インポートを読めないみたいで、プラグインを入れる必要があった。&lt;/p></description></item><item><title>2024-03-02</title><link>https://blog.nfurudono.com/daily/2024-03-02/</link><pubDate>Sat, 02 Mar 2024 10:44:06 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-03-02/</guid><description>&lt;p>&lt;code>op inject&lt;/code> が欲しいやつだった。テンプレートに1passのURLぽいやつを書いてコマンドに渡すと、そこを埋めたファイルを出力してくれる。埋め込むときに環境変数を読んで、URL内での参照を置換した上で1passのレコードを参照することもできる。&lt;/p></description></item><item><title>2024-02-17</title><link>https://blog.nfurudono.com/daily/2024-02-17/</link><pubDate>Sat, 17 Feb 2024 17:55:29 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-02-17/</guid><description>&lt;p>glangに&lt;a href="https://github.com/golang/go/issues/61405">generatorを入れようというプロポーザル&lt;/a>があって、試験的に実装されているみたい。いくつかのパターンがあるけど、&lt;a href="https://go.dev/play/p/93W3jTQjBk0?v=gotip">だいたいこんな感じで使える (The Go Playground)&lt;/a>。&lt;/p>
&lt;p>ジェネレータとして使われる関数は定義の段階では普通の関数と区別がつかないような構文定義をされている。コンパイラやランタイムの実装が気になるし、静的解析ツールが大変なことにならないかが心配。&lt;/p></description></item><item><title>読書メモ - eBPF入門</title><link>https://blog.nfurudono.com/book/ebpf-abc/</link><pubDate>Sun, 31 Dec 2023 23:25:26 +0900</pubDate><guid>https://blog.nfurudono.com/book/ebpf-abc/</guid><description>&lt;h2>
&lt;a href="#%e5%8b%95%e6%a9%9f" id="動機" class="anchor" aria-hidden="true">動機&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>eBPF面白そうだったので。その目的とかユースケースを知りたかったり、周辺ツールがどういう具合に整備されて使われているかも知りたかった。&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e9%9d%a2%e7%99%bd%e3%83%9d%e3%82%a4%e3%83%b3%e3%83%88" id="面白ポイント" class="anchor" aria-hidden="true">面白ポイント&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>コンテナ横断で情報を取れるのはなるほどなって感じ&lt;/li>
&lt;li>hello worldいつやろうか迷う
&lt;ul>
&lt;li>limaでやるのはつらいのかなと想像しつつ手を動かしていない&lt;/li>
&lt;li>帰省していてlinuxマシンが手元にない&lt;/li>
&lt;li>本で紹介されている方法は本番ではお勧めできないとか今の所書いてあるし&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e5%be%97%e3%81%9f%e7%9f%a5%e8%ad%98%e3%81%ae%e4%bd%bf%e3%81%84%e9%81%93" id="得た知識の使い道" class="anchor" aria-hidden="true">得た知識の使い道&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>コンテナ環境をホストするなら監視で使えるかも。いかがわかっていない
&lt;ul>
&lt;li>何を監視したいのか&lt;/li>
&lt;li>何を監視できるのか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e7%96%91%e5%95%8f" id="疑問" class="anchor" aria-hidden="true">疑問&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>プログラムのサイズを制限しているのは何が目的なんだろう&lt;/li>
&lt;/ul></description></item><item><title>2023-11-14</title><link>https://blog.nfurudono.com/daily/2023-11-14/</link><pubDate>Tue, 14 Nov 2023 23:03:59 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-11-14/</guid><description>&lt;p>このブログのデプロイに使っているgithub action workflowを読んでいたら、外部リポジトリにデプロイするのも簡単なことに気がついた。&lt;a href="https://github.com/peaceiris/actions-gh-pages/tree/v3/#%EF%B8%8F-deploy-to-external-repository-external_repository">https://github.com/peaceiris/actions-gh-pages/tree/v3/#%EF%B8%8F-deploy-to-external-repository-external_repository&lt;/a>&lt;/p>
&lt;p>たとえばプライベートリポジトリでマークダウンを管理して、公開したいアセットだけを今のリポジトリに置く運用を実現できる。公開したくない文言はどこにも書かない運用にしているのだけど、限界はたまに感じるので移行しても良いかも。とはいえ情報はできるだけオープンにしたい信仰があるのも確かなので悩ましい。&lt;/p></description></item><item><title>2023-10-24</title><link>https://blog.nfurudono.com/daily/2023-10-24/</link><pubDate>Tue, 24 Oct 2023 00:13:41 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-10-24/</guid><description>&lt;h2>
&lt;a href="#hugo%e3%81%8c%e8%89%af%e3%81%8f%e3%81%aa%e3%81%a3%e3%81%a6%e5%ac%89%e3%81%97%e3%81%84" id="hugoが良くなって嬉しい" class="anchor" aria-hidden="true">hugoが良くなって嬉しい&lt;/a>
&lt;/h2>
&lt;p>hugoでCJKの文章で改行を無視できるようになった。
platexとかでは当たり前のように単独の改行は日本語文中で無視されていたが、巷のmarkdownエンジンはそうとは限らない。
hugoがデフォルトで使うgoldmarkではオプションで指定できていたようだが、
hugoではそのオプションを活用しないでいたみたい。&lt;/p></description></item><item><title>2023-10-09</title><link>https://blog.nfurudono.com/daily/2023-10-09/</link><pubDate>Mon, 09 Oct 2023 12:05:12 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-10-09/</guid><description>&lt;p>テキストを扱うツールをたくさん知れたことが情報系に進んで一番お得なことだったなと感じている。エディタ、git、その他CLIツールを日常的に使う環境に身をおけたことは幸運だったと思う。というか、これが幸運ではなく当たり前な世の中になって然るべきな気がしてきた。&lt;/p></description></item><item><title>GASでスライド生成</title><link>https://blog.nfurudono.com/posts/generate-slides-from-template/</link><pubDate>Sun, 01 Oct 2023 23:29:39 +0900</pubDate><guid>https://blog.nfurudono.com/posts/generate-slides-from-template/</guid><description>&lt;p>Google Slidesで作成したテンプレートファイルに文字列を置換する形でスライドを生成するスクリプトをChat GPTに書いてもらったのでメモ。&lt;/p>
&lt;pre>&lt;code class="language-aa">+--------------------------------+
| |
| {{氏名}} |
| |
| |
| {{住所}} |
+--------------------------------+
&lt;/code>&lt;/pre>
&lt;p>みたいなスライドを作って、&lt;/p></description></item><item><title>2023-09-21</title><link>https://blog.nfurudono.com/daily/2023-09-21/</link><pubDate>Thu, 21 Sep 2023 21:18:11 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-09-21/</guid><description>&lt;h2>
&lt;a href="#%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%83%8f%e3%83%83%e3%82%b7%e3%83%a5%e3%81%8b%e3%82%89pr%e3%82%92%e7%89%b9%e5%ae%9a%e3%81%99%e3%82%8b%e6%96%b9%e6%b3%95" id="コミットハッシュからprを特定する方法" class="anchor" aria-hidden="true">コミットハッシュからPRを特定する方法&lt;/a>
&lt;/h2>
&lt;p>&lt;code>gh&lt;/code> コマンドを使うとPRの番号とタイトルを取得できる。&lt;/p>
&lt;pre>&lt;code class="language-sh">gh pr list --search &amp;quot;&amp;lt;SHA&amp;gt;&amp;quot; --state merged`
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://cli.github.com/manual/gh_pr_list">https://cli.github.com/manual/gh_pr_list&lt;/a>&lt;/p></description></item><item><title>ベストバイ</title><link>https://blog.nfurudono.com/posts/2023-09-bestbuy/</link><pubDate>Wed, 13 Sep 2023 22:49:06 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2023-09-bestbuy/</guid><description>&lt;p>酔っていて興が乗ったので「しばらくの間で買って良かったもの」N選をやります！！&lt;/p>
&lt;h2>
&lt;a href="#%e6%9c%ac%e6%a3%9a" id="本棚" class="anchor" aria-hidden="true">本棚&lt;/a>
&lt;/h2>
&lt;p>本棚を買いました！横に長いタイプの本棚で、高さは太ももくらいです。二段だけで、本棚の上にも物を置けるような感じ。幅は120cmくらい（ところでセンチって微妙ですよね）で、横に長めの本棚です。
2cmくらいの厚さのベニヤ？でできていて、それなりに丈夫そうな雰囲気があります。
minneで買いました。一階にプログラミング言語のほんを置いて、2階にそのほかの本を置いています。本棚にある本の中でのおすすめは、『数学の基礎 集合・数・位相』です。これを読むと実数の作り方がわかって感動できます。また、眠れない夜にぴったりで、楽しめるときには存分に興奮できるし、そうでもないときには眠くなります。ホテルに聖書の代わりにこれを置いたらいいのにと思ってます。&lt;/p></description></item><item><title>2023-09-09</title><link>https://blog.nfurudono.com/daily/2023-09-09/</link><pubDate>Sat, 09 Sep 2023 22:52:30 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-09-09/</guid><description>&lt;h2>
&lt;a href="#%e8%a8%ad%e5%ae%9a%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%81%afjson%e6%b4%be" id="設定ファイルはjson派" class="anchor" aria-hidden="true">設定ファイルはjson派&lt;/a>
&lt;/h2>
&lt;p>tomlもyamlも難しいので、みんなjsonを書けばいいのにと思う。
Goとか静的型付け言語とかが流行って、読みやすさの意義が重要視されている時代なはずなのに、設定ファイルは書きやすさとか、見栄えの良さが重視されていそうなフォーマットが人気なのが解せない。
jsonがナウいんじゃないかと思うし、好みとしてもjsonがいいなと思う。&lt;/p></description></item><item><title>ブログを分割したい</title><link>https://blog.nfurudono.com/posts/divide-dev-posts/</link><pubDate>Wed, 06 Sep 2023 21:06:05 +0900</pubDate><guid>https://blog.nfurudono.com/posts/divide-dev-posts/</guid><description>&lt;p>このブログは日記も開発っぽいことも両方書いてある。これらを別のサイトに分けようと考えている。&lt;/p>
&lt;ul>
&lt;li>開発の記事が日記に埋もれるのが嫌だから&lt;/li>
&lt;li>今の環境だと開発の記事を書きにくい・表現しにくいから
&lt;ul>
&lt;li>コードや数式を書きにくい・表示が微妙など&lt;/li>
&lt;li>madoko使いたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>そのための準備としてnetlifyを試しに使ってみた。このブログのリポジトリを登録したら、特に細かい設定をしないでもシュッとデプロイできてしまった。すごい。DNSとかSSLとかの設定を試していく。&lt;/p></description></item><item><title>2023-08-30</title><link>https://blog.nfurudono.com/daily/2023-08-30/</link><pubDate>Wed, 30 Aug 2023 22:59:11 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-08-30/</guid><description>&lt;h2>
&lt;a href="#%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%81%ae%e5%ad%98%e5%9c%a8%e3%83%81%e3%82%a7%e3%83%83%e3%82%af" id="コマンドの存在チェック" class="anchor" aria-hidden="true">コマンドの存在チェック&lt;/a>
&lt;/h2>
&lt;p>dotfileを整備して、シェルの設定を複数のマシンで共有していると、あるコマンドがインストールされている場合にのみ、有効にしたい設定が出てくる。僕が今回遭遇したのは、k8sのcontextをプロンプトに表示する設定をなんとかしたいという欲求。いい感じに表示するコマンドが入っていれば、プロンプトに反映したいけど、入っていなければ別に表示しないのもありで、無理して全てのマシンにコマンドをインストールしたくはない。&lt;/p></description></item><item><title>dotfilesのセットアップスクリプトを書いた</title><link>https://blog.nfurudono.com/posts/dotfiles-setup/</link><pubDate>Thu, 17 Aug 2023 01:15:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/dotfiles-setup/</guid><description>&lt;h2>
&lt;a href="#%e5%8b%95%e6%a9%9f" id="動機" class="anchor" aria-hidden="true">動機&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/dotfiles/tree/main">dotfiles&lt;/a>をGitHubで管理しているのだが、今までは設定ファイルの管理だけで、インストールは手動で行なっていた。設定ファイルを使いまわせるだけでだいぶ便利なんだけど、コンテナ環境の中で作業したくなると、手動インストールに耐えられなくなる。そこで重い腰を上げてセットアップを自動化した。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8" id="やったこと" class="anchor" aria-hidden="true">やったこと&lt;/a>
&lt;/h2>
&lt;h3>
&lt;a href="#cli%e7%92%b0%e5%a2%83%e3%81%ae%e3%82%bb%e3%83%83%e3%83%88%e3%82%a2%e3%83%83%e3%83%97%e3%82%92%e7%b0%a1%e5%8d%98%e3%81%ab%e3%81%97%e3%81%9f" id="cli環境のセットアップを簡単にした" class="anchor" aria-hidden="true">CLI環境のセットアップを簡単にした&lt;/a>
&lt;/h3>
&lt;p>&lt;code>git&lt;/code> のインストールと以下の実行でok。
nvimとかfishとかcargoとかが入る。&lt;/p></description></item><item><title>2023-07-01</title><link>https://blog.nfurudono.com/daily/2023-07-01/</link><pubDate>Sat, 01 Jul 2023 01:07:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-01/</guid><description>&lt;h2>
&lt;a href="#envsubst%e3%82%92%e7%9f%a5%e3%81%a3%e3%81%9f" id="envsubstを知った" class="anchor" aria-hidden="true">&lt;code>envsubst&lt;/code>を知った&lt;/a>
&lt;/h2>
&lt;p>&lt;code>envsubst&lt;/code>を使うと標準入力の環境変数の参照っぽいところに環境変数の値を埋め込んだテキストを吐ける。
readmeにコマンドのヘルプメッセージを載せたいときに便利。例: &lt;a href="https://github.com/naoyafurudono/tools/tree/main/cl">https://github.com/naoyafurudono/tools/tree/main/cl&lt;/a>&lt;/p></description></item><item><title>2023-06-30</title><link>https://blog.nfurudono.com/daily/2023-06-30/</link><pubDate>Fri, 30 Jun 2023 11:33:52 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-30/</guid><description>&lt;h2>
&lt;a href="#gitigrnore%e3%81%ae%e5%8f%8d%e6%98%a0" id="gitigrnoreの反映" class="anchor" aria-hidden="true">.gitigrnoreの反映&lt;/a>
&lt;/h2>
&lt;p>すでにgit管理されているファイルをgitignoreでマッチするようにしても、管理から外れない。外すためには以下のようにすると良い。&lt;/p></description></item><item><title>2023-06-29</title><link>https://blog.nfurudono.com/daily/2023-06-29/</link><pubDate>Thu, 29 Jun 2023 22:02:44 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-29/</guid><description>&lt;h2>
&lt;a href="#crateio%e3%83%87%e3%83%93%e3%83%a5%e3%83%bc" id="crateioデビュー" class="anchor" aria-hidden="true">crate.ioデビュー&lt;/a>
&lt;/h2>
&lt;p>crate.ioに初めてコードを登録した。&lt;code>cargo install&lt;/code> で入るから便利。ちょっとしたCLIツール書く体験がなかなか良い。
copilotが面倒なことやってくれる。&lt;/p></description></item><item><title>2023-06-24</title><link>https://blog.nfurudono.com/daily/2023-06-24/</link><pubDate>Sat, 24 Jun 2023 19:10:24 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-24/</guid><description>&lt;p>macのタイムゾーンの設定が狂っていて、今日の投稿がこれと前回の二つに分かれてしまった。&lt;/p>
&lt;p>今日はmacの設定と、以降に伴って壊れたちょっとしたCLIツールの修正した。昔Rustで雑に書いたもので、エラー処理が辛そうだったので少し勉強して改善した。
anyhowを使ってみたい気持ちが湧いたけど、まずは基本的なところからということでトレイトオブジェクトを使うことにした。&lt;code>type Result&amp;lt;T&amp;gt; = std::Result&amp;lt;T, dyn Error&amp;gt;&lt;/code>みたいな感じにすることで、いろんなエラーを孕んだresultに&lt;code>?&lt;/code>を使うことができて幸せ。&lt;/p></description></item><item><title>2023-06-23</title><link>https://blog.nfurudono.com/daily/2023-06-23/</link><pubDate>Fri, 23 Jun 2023 20:17:59 -0700</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-23/</guid><description>&lt;h2>
&lt;a href="#%e7%92%b0%e5%a2%83%e6%a7%8b%e7%af%89" id="環境構築" class="anchor" aria-hidden="true">環境構築&lt;/a>
&lt;/h2>
&lt;p>macを買って環境構築をしているのでメモしていく。&lt;/p>
&lt;ul>
&lt;li>capslock -&amp;gt; eisu toggle
&lt;ul>
&lt;li>システム環境設定 &amp;gt; キーボード &amp;gt; テキスト入力 &amp;gt; 入力ソース &amp;gt; Caps LockキーでABC入力モードに切り替える&lt;/li>
&lt;li>最近のmacは組み込みの設定で変更できるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1Password
&lt;ul>
&lt;li>&lt;a href="https://support.1password.com/secret-key/">最新のドキュメント&lt;/a>を参考にしてsecret keyを探し出す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CLIツール: 以下の順で入れると良い。気が向いたらインストールスクリプトを書こう
&lt;ul>
&lt;li>brew&lt;/li>
&lt;li>fish&lt;/li>
&lt;li>nvim&lt;/li>
&lt;li>.config&lt;/li>
&lt;li>その他&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>gitでsshを使うための設定: この投稿のおまけを参考に
&lt;ul>
&lt;li>鍵を生成&lt;/li>
&lt;li>githubに公開鍵を登録&lt;/li>
&lt;li>.ssh/configを書く&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>
&lt;a href="#%e3%81%8a%e3%81%be%e3%81%91" id="おまけ" class="anchor" aria-hidden="true">おまけ&lt;/a>
&lt;/h3>
&lt;h4>
&lt;a href="#ssh-keygen%e3%82%92%e4%be%bf%e5%88%a9%e3%81%ab" id="ssh-keygenを便利に" class="anchor" aria-hidden="true">ssh-keygenを便利に&lt;/a>
&lt;/h4>
&lt;p>個人メモ：&lt;a href="https://github.com/naoyafurudono/dotfiles/blob/main/fish/functions/_ssh-keygen.fish">dotiflilesに書いてある&lt;/a>のでコピペは不要。&lt;/p></description></item><item><title>2023-06-17</title><link>https://blog.nfurudono.com/daily/2023-06-17/</link><pubDate>Sat, 17 Jun 2023 22:42:59 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-17/</guid><description>&lt;h2>
&lt;a href="#%e3%83%ab%e3%83%b3%e3%83%90%e5%b0%8e%e5%85%a5" id="ルンバ導入" class="anchor" aria-hidden="true">ルンバ導入&lt;/a>
&lt;/h2>
&lt;p>ルンバをレンタルして今日から使い始めた。結構細かく動いてくれて僕より掃除がうまい気がする。
7時/19時で掃除するようにしたので、目覚まし代わりになるはずだし、寝る前と出勤前に床を片付ける習慣がつきそうで期待してる。&lt;/p></description></item><item><title>2023-05-19</title><link>https://blog.nfurudono.com/daily/2023-05-19/</link><pubDate>Fri, 19 May 2023 23:06:37 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-05-19/</guid><description>&lt;p>明日は秋吉台に行く。楽しみ。新幹線を初めてスマホで買った。どうやらモバイルパスモで乗れるみたいなのでワクワクしてる。更に今日、仕事が終わってからJINS MEMEを買ったのでそのあたりでも楽しみが止まらない。&lt;/p></description></item><item><title>2023-05-13</title><link>https://blog.nfurudono.com/daily/2023-05-13/</link><pubDate>Sat, 13 May 2023 20:38:25 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-05-13/</guid><description>&lt;h2>
&lt;a href="#%e4%bb%8a%e6%97%a5%e3%81%afrust%e3%82%92%e5%b0%91%e3%81%97%e5%8b%89%e5%bc%b7%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b" id="今日はrustを少し勉強している" class="anchor" aria-hidden="true">今日はRustを少し勉強している&lt;/a>
&lt;/h2>
&lt;p>もともと&lt;code>bash&lt;/code>で書いていたスクリプトを拡張したくなって、普段ならPythonで書くところを今日は新しいことをしてみようということでRustをつかってみることにした。&lt;/p></description></item><item><title>2023-04-16</title><link>https://blog.nfurudono.com/daily/2023-04-16/</link><pubDate>Sun, 16 Apr 2023 11:55:02 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-16/</guid><description>&lt;h2>
&lt;a href="#chatgpt%e3%81%a8%e3%81%ae%e6%88%af%e3%82%8c" id="chatgptとの戯れ" class="anchor" aria-hidden="true">ChatGPTとの戯れ&lt;/a>
&lt;/h2>
&lt;p>午前中はChatGPTとかであそんでいた。ブログを書いていたおかげで、AIに食わせる自分の書いた文書に困らないのが嬉しい。&lt;/p></description></item><item><title>2023-03-31</title><link>https://blog.nfurudono.com/daily/2023-03-31/</link><pubDate>Fri, 31 Mar 2023 16:01:16 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-03-31/</guid><description>&lt;p>東大の田浦先生が公開されている&lt;a href="https://doss.eidos.ic.i.u-tokyo.ac.jp/">大規模ソフトウェアを探る&lt;/a>がとてもよかった。
GDBを使って大きなソフトウェアの振る舞いを理解する方法を学べる。
2年ほど前に、こういう資料が喉から手が出るほどほしいと感じていた記憶がある。&lt;/p></description></item><item><title>GitHub Actionsの実行結果をDiscordに通知</title><link>https://blog.nfurudono.com/posts/notify-github-actions/</link><pubDate>Thu, 30 Mar 2023 14:04:28 +0900</pubDate><guid>https://blog.nfurudono.com/posts/notify-github-actions/</guid><description>&lt;p>このブログはGitHub Actionsでデプロイしているのだが、ここしばらくデプロイに失敗したことに気が付かずに放置してしまっていた。&lt;/p>
&lt;p>&lt;a href="https://github.com/marketplace/actions/actions-status-discord">Actions Status Discord&lt;/a>というアクションを&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/commit/1f7a900b4c8aa166dd735c61ee1667119b23e810">デプロイの最後に叩く&lt;/a>ことで、いい感じの通知をDiscordにWebhook経由で送れる。&lt;/p></description></item><item><title>Hugoのマークダウン処理をカスタム</title><link>https://blog.nfurudono.com/posts/custom-markdown-translation-with-hugo/</link><pubDate>Thu, 30 Mar 2023 13:27:46 +0900</pubDate><guid>https://blog.nfurudono.com/posts/custom-markdown-translation-with-hugo/</guid><description>&lt;h2>
&lt;a href="#%e8%83%8c%e6%99%af" id="背景" class="anchor" aria-hidden="true">背景&lt;/a>
&lt;/h2>
&lt;p>HTML文書のheading要素の周りには&lt;code>id&lt;/code>がついていてほしいし、それへのリンクは手軽にコピーできて欲しい。その点Googleのドキュメントはとても好き。人に文書コンテンツを渡すときにこちらの意図がURLで表現できるし、そのリンクを踏んだ側も見るべき箇所にスムーズにたどり着ける。このブログを書くのに使っているHugoでも同じことをした。&lt;/p></description></item><item><title>使い勝手の良いデスクトップ向けウィンドウマネージャが欲しい</title><link>https://blog.nfurudono.com/posts/window-manager/</link><pubDate>Thu, 16 Mar 2023 11:50:52 +0900</pubDate><guid>https://blog.nfurudono.com/posts/window-manager/</guid><description>&lt;p>使い勝手のよいウィンドウマネージャがWindowsとかMacに搭載されることはないだろう。使うアプリケーションやブラウザ、入力デバイスやその使い方によって使い勝手が大きく変わるだろうから。
OSが決め打ちで提供できるものでは無いんじゃないかと思う。なので自分でまじめに使い勝手の良いものを考える必要がある。&lt;/p></description></item><item><title>エフェクトハンドラの良さと実用性について</title><link>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</link><pubDate>Thu, 16 Mar 2023 10:57:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</guid><description>&lt;p>エフェクトハンドラで継続や代数的エフェクトを扱う必要性は一ミリもなくて、実用的にそれらが欲しくなることはないか、あるいは限られていてそこまで一般的な機能を提供する必要はないんじゃないかと感じている。&lt;/p></description></item><item><title>Google Cloudの認証を必要とするアプリケーション開発について</title><link>https://blog.nfurudono.com/posts/gcp-cred/</link><pubDate>Tue, 14 Mar 2023 19:19:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/gcp-cred/</guid><description>&lt;p>Google Cloudの認証・認可はきめ細かくちゃんとしている感じがして、扱うのが難しいと感じていた。少し調べたら&lt;a href="https://cloud.google.com/docs/authentication/client-libraries#adc">Application Default Credentials with client libraries&lt;/a>の説明を見つけて腹に落ちた。これを抑えた上で、&lt;a href="https://cloud.google.com/docs/authentication/provide-credentials-adc#how_to_provide_credentials_to_adc">それぞれの実行環境でどのようにcredentialをセットアップするか&lt;/a>を見ると、プロセスの権限が半分くらいわかる。ここまでで、サービスアカウントがどのようにプロセスに付与されるかを理解できるはずだ。&lt;/p></description></item><item><title>Linux (gnome) でよくやる設定</title><link>https://blog.nfurudono.com/posts/linux-keys/</link><pubDate>Tue, 28 Feb 2023 01:59:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/linux-keys/</guid><description>&lt;p>GNOMEというかLinuxというかでよくやる設定を列挙する。キーボード系が多いと思う。&lt;/p>
&lt;h3>
&lt;a href="#gnome-terminal-%e3%81%a7ctrl-shift-tab%e3%82%92%e6%9c%89%e5%8a%b9%e3%81%ab%e3%81%99%e3%82%8b" id="gnome-terminal-でctrl-shift-tabを有効にする" class="anchor" aria-hidden="true">gnome-terminal で&lt;code>ctrl-(shift-)?tab&lt;/code>を有効にする&lt;/a>
&lt;/h3>
&lt;p>以下を実行&lt;/p></description></item><item><title>2023-02-27</title><link>https://blog.nfurudono.com/daily/2023-02-27/</link><pubDate>Mon, 27 Feb 2023 18:56:50 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-02-27/</guid><description>&lt;p>Gentooが入った。基本的に待っているだけではあるのだけど、それがなかなか大変。パッケージを一瞬でインストールできる幸せに気がついた。割とすぐにUbuntuに戻るかもしれない。今はnodejsとtexliveをコンパイルしている。未だかつてなくCPUが仕事をしている。かわいそうに。とはいえportageに触れるのはなかなか楽しい。&lt;/p></description></item><item><title>軽いドキュメントを印刷するためのツールが欲しい</title><link>https://blog.nfurudono.com/posts/print-docs/</link><pubDate>Fri, 24 Feb 2023 17:48:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/print-docs/</guid><description>&lt;p>さくっと書いた文書を印刷したいことがある。ビジネスライクな手紙とか、その日のTODOリストなんかがそうだ。
LaTeXやMadokoを使うのは大げさな感じがして、諦めて手書きするか、Google Docsで済ませることが多い。とはいえ手紙の書き方を毎回調べたり、フォーマットを調整したり、PCで打ち込んだデータを手書きするのはつらい。&lt;/p></description></item><item><title>PCの構成メモ</title><link>https://blog.nfurudono.com/posts/my-pc/</link><pubDate>Thu, 23 Feb 2023 14:22:44 +0900</pubDate><guid>https://blog.nfurudono.com/posts/my-pc/</guid><description>&lt;p>PCを自作して使っているのだけど、どんなパーツを使ったか忘れて後でなにか買い足すときに互換性があるかわからなくてこまる。今回調査してメモしておく。&lt;/p></description></item><item><title>HugoでタグをつけるためのTips</title><link>https://blog.nfurudono.com/posts/tips-for-tagging/</link><pubDate>Thu, 16 Feb 2023 16:34:49 +0900</pubDate><guid>https://blog.nfurudono.com/posts/tips-for-tagging/</guid><description>&lt;p>車輪の再発明ではあるだろうけどメモしておく。&lt;code>archetypes/&lt;/code>に&lt;code>hugo new&lt;/code>で生成する&lt;code>.md&lt;/code>ファイルのテンプレを置くことができる。そこにありうるすべてのタグを書いておけば、記事を書くときに関係ないタグを消すことで、関連するタグを忘れずにつけることができる。&lt;/p></description></item><item><title>2022-12-30</title><link>https://blog.nfurudono.com/daily/2022-12-30/</link><pubDate>Fri, 30 Dec 2022 20:37:17 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2022-12-30/</guid><description>&lt;h2>
&lt;a href="#%e3%82%b9%e3%82%af%e3%83%aa%e3%83%97%e3%83%88%e3%82%92%e7%9c%9f%e9%9d%a2%e7%9b%ae%e3%81%ab%e6%9b%b8%e3%81%84%e3%81%9f" id="スクリプトを真面目に書いた" class="anchor" aria-hidden="true">スクリプトを真面目に書いた&lt;/a>
&lt;/h2>
&lt;p>昔聴いていた音楽を久しぶりに聞きたくなったのだがSpotifyで配信されていなかった。ローカルにデータがあったのでそこからSpotifyかVLCとかで使えるようにしようと思ったのだが、ローカルデータのファイルフォーマットが変だったりディレクトリ構成がイマイチで体験が良くない。&lt;/p></description></item><item><title>2022-11-28</title><link>https://blog.nfurudono.com/daily/2022-11-28/</link><pubDate>Mon, 28 Nov 2022 23:34:53 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2022-11-28/</guid><description>&lt;p>AmazonでEchoが安かったので買ってしまった。特に使いみちは考えていなかったのだけど、プログラミングの新しいエントリポイントとして楽しい。&lt;/p></description></item><item><title>2022-11-27</title><link>https://blog.nfurudono.com/daily/2022-11-27/</link><pubDate>Sun, 27 Nov 2022 17:27:48 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2022-11-27/</guid><description>&lt;h2>
&lt;a href="#%e3%83%87%e3%83%bc%e3%82%bf%e6%8c%87%e5%90%91%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%81%8c%e8%89%af%e3%81%84" id="データ指向アプリケーションデザインが良い" class="anchor" aria-hidden="true">データ指向アプリケーションデザインが良い&lt;/a>
&lt;/h2>
&lt;p>タイトルを見たときには、アーキテクチャ的な話が中心なのかと思っていたけど、蓋を開けると、それを構成するための技術を基礎から説明してくれた。たとえばデータベースの種類（関係、ドキュメント、グラフ）とその実例や特性、インデックスのデータ構造の説明、比較など。データベースだけの本でもないけど、そのへんはまだ読んでいないので触れない。&lt;/p></description></item></channel></rss>