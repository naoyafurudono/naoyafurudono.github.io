<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on nfurudono</title><link>https://naoyafurudono.github.io/posts/</link><description>Recent content in Posts on nfurudono</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 16 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://naoyafurudono.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>NeoVimを使い始めた</title><link>https://naoyafurudono.github.io/posts/2022/april/neovim/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://naoyafurudono.github.io/posts/2022/april/neovim/</guid><description>Neo Vimが使っていて楽しい、という話。普段はVSCodeを使っていて、全然移行したわけでもないのだけれど、NVimは文字入力に対する反応が比較的早くて楽しい。 ところで、いつも思うのだけど、日本語って打ちにくくないだろうか。IMEがいるのが良くない（これ以上の日本語入力方式はないだろうか？手書きよりは良いのだけれど）。
英語だとタイプミスしてもとりあえず近い単語を入力できて、大体スペルチェッカの修正機能で直せる。だからテキトーにキーを叩いてからあとはおまかせでok。入力ミスのダメージが小さい。それに対して日本語では、IMEが正しく認識できるように文字列を入力しないといけない。多少のまちがいはIMEは許容してくれることもあるけど英語の時ほどではなくて、大抵は一字一句正確に入力しないといけない。もしも間違って入力すると、IMEがうけっとた範囲の入力が全て誤って変換されるので（部分的にあっていても、正確に変換させるために全消しすることが多い）、ダメージが大きい。だから日本語入力は大変だ。</description></item><item><title>構文エディタ実装の考え</title><link>https://naoyafurudono.github.io/posts/2022/april/syntacticalz-editor/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://naoyafurudono.github.io/posts/2022/april/syntacticalz-editor/</guid><description>構文エディタとは、文字単位だけでなく抽象構文木単位での編集ができるエディタのこと。 一般のコードでなく、プログラムを編集することは抽象構文木のノードやエッジの編集に対応する。 ならば、そういう単位での編集をエディタが直接サポートすれば楽できるという発想（だと想像する）。
アイデアとしてはそれらしい気がする。でも流行ってるようには見えない。 なんでか？
需要が少ない: プログラムを新しく書くことは構文エディタの対象外であり、プログラムがあってそれに対する選択が主な操作である。なので構文じゃない編集機能はやはり必要で、そう考えるとそんなに欲しくない。とか？ 使い勝手が悪い: 使ったことがないし、具体的な機能を知らないので想像でしかないけど、おそらく思ったようにASTのノードを選択できないのではないか？そもそも選択したい「ASTのノード」が実は存在しないケースがある。(e1;e2;e3)のうち、e1;e2とe2;e3のどちらかは存在しないはず。この辺りの問題は工夫すれば解決できそう。既存の実装はどのくらい工夫しているのだろうか。 普通のエディタで十分: 前の/次のセミコロンまでジャンプとか、かっこまでジャンプとかがあれば済むケースは多い。 実装が大変: 使い勝手を考えるとシンタックスハイライトとかよりは大変そう。抽象構文木をアレンジした概念が必要になりそう。 実装の話は Lisp なら簡単か。かっこを上手に扱う機能が入ればあとは普通のエディタの機能でほとんど構文エディタになる。
逆にシンタックスを弄りやすくして、普通のエディタが構文エディタ的な振る舞いをできるようにするのはどうだろう？Haskellはいい線いってる？文を消す &amp;lt;&amp;ndash;&amp;gt; 行を消すの対応をほとんどの言語でしているので多かれ少なかれそういう側面がある。究極的にはどこまでいけるだろうか？ エディタの基本操作は一文字入力/削除か。Vimでできることに広げるとどうだろうか。
関連して、エディタの話の制限を忘れて、言語デザインと使い勝手を考えたい。 ソースコード &amp;ndash;&amp;gt; AST &amp;ndash;&amp;gt; typed-AST &amp;ndash;&amp;gt; 実行結果 くらいの段階がプログラマが交流しうるプログラムの表現だろう（実行結果が入るのは理論的じゃないかもだけど、気持ちとしては入るはず。みんな実行のことを考えてプログラムを書くのだから）。
プログラムの概念は色々あるが、それらは必ず上のどこかの概念として捉えることができる。 プログラムの挙動は実行時のことだし、行数はソースコードのこと。では型は？ typed-ASTかそれよりも前のどこかだ。例えば型アノテーションついていればソースコードの時点でわかるが、付けずに型推論に任せていれば、typed-ASTにまで頭を巡らせないとわからない。
変数の参照はどうだろう。ソースコードなことが望ましい（lexical scope）けどそうじゃない困った言語もある。
いろんな概念があるが、なんにしても、早い段階でわかったほうが嬉しいことが多いだろう。 でも一方でそれをわかあるためにプログラマがコンパイラの代わりをするのは非人道的だ。 型アノテーションは大切だけど型推論を邪魔者扱いする人はいない（いないよね？）。 これ以上具体的なことは言語の意味論によるだろう。HaskellとSchemeを同じ土俵で議論するのは大変そう。</description></item><item><title>読書感想: 入門 コンピュータ科学</title><link>https://naoyafurudono.github.io/posts/2022/march/intro-cs/</link><pubDate>Sat, 26 Mar 2022 11:12:44 +0900</pubDate><guid>https://naoyafurudono.github.io/posts/2022/march/intro-cs/</guid><description>本をざっくり読んだので感想をメモ。読んでよかった。
読んだ本: 入門 コンピュータ科学。
感想 おそらく情報工学科の学部で扱うであろう内容をまとめた本。プログラミングはしないけど、それ以外の座学は大体ざっくりまとまっていそう。僕は情報工学科の講義をとっていないので、真偽はわからないのだけど。 あくまで内容はざっくりしていて、専門的な内容は省かれている感じ。インターネットとはとか、データベースとは、プログラミング言語とは、みたいなことが書かれていて、それぞれの難しさを指摘するところまでを解説してくれる。技術の実装方法や難しさの解決策とかは扱わない感じ（だったはず）。CS関連で知らないことが出てきた時に、どの辺を勉強すれば良いかの手がかりとなる概観を与えてくれたんだと思う。
この本を読んで、データベースとインターネットについてざっくりとした理解を得た。手を動かしつつ、必要に応じて勉強できそうだと思う。 情報系の学部出身と言ったら、このくらいは完全に理解していて、さらに専門的なところまでいけることを社会から期待されている気がする。どのあたりの知見が僕に欠けているかを（多分）理解できたし、足りていなかったところをある程度補完できた。
余談1: 僕のバックグラウンド 上の感想文を書いて、僕のバックグラウンドに疑問を抱く人がいるかもしれないと思ったので説明しておく。
僕は情報科学科（数理・計算科学系）の出身でコンピュータサイエンスを一応専攻してきた。 ただ、CSだけじゃなくて統計や数学も学科が扱う範囲に入っていて、例えば確率論の基礎（σ加法族とかから初めて中心極限定理まで）とか集合と位相（和集合演算というのは&amp;hellip;とかから濃度、ベルンシュタインの定理、選択公理をみて、位相論では分離公理（だったっけ？）とか連続性を扱った。付録的な立ち位置だったけど、有理数全体の集合を距離空間として見たとき、それを完備化して実数を構成する様も追った。）。これらは学部2年の話で、他にも色々講義があった。その傍でCSの講義も開講されていた感じなので、ある程度カルキュラムから端折ったCSの内容があったのだろうと思う。統計や数学の人からしても、端折った箇所があったと感じてるのではないかと想像する。数学か行くべきと発言していた人もいる。そういうわけで、今回本を読んで知識を補完できてよかったと思った。
学科の選択に後悔はなくて、色々楽しそうな領域を見て、そうでもないかなと判断できた。その中で生き残った楽しい領域で今勉強しているのだから、とりあえず満足。なんならプログラムングなんてしたくないと、学部3年の終わりまで思っていたし。
余談2: 学部の講義と教科書/講義資料について 学部の授業で講義資料を作るのやめて、こういう教科書を指定するのが学生のためだと思う。講義資料を作るのは先生の自己満足なのだろうか。先生にとっては勉強になるだろうが、学生からすると比較的完成度の低い資料を与えられて、成績のためにそれに従った勉強を強いられる。授業内容は先生の専門になるほど細かいことではなく、多くの人が知っている教養的な内容なのだから、信頼できる文献を学生に与えることが教える側の責任の取り方なんじゃないかと思う。教科書を用いて講義を進めることにどんな問題があるのだろうか。
本を読むときに、人から与えられて読むか、自分で発見して読むかによって学習のモチベーションは大きく変わる。 人から与えられた時には粗が気になるが、自分で読む時に美点に目がつく傾向がある。もちろん白黒はっきり分かれるわけではなくて、どちらかというと、くらいのふんわりとした傾向でしかないけど。その辺りを気にして良い教科書を紹介しないで、やる気のある人が自分で発見する機会をとっておくために自作の講義資料を使う、とか？
そうだとしたら、その判断は微妙に感じる。講義で一回目を通して、その時は読む気が起きなかった教科書も、後々（数ヶ月、1、2年後）に読み返すことは少なくない。その時には自分で発見して読むときと同じようなモチベーションで僕は読める。そういうわけで、良い本を知らずに過ごすリスクを減らすためにやはり先生には紹介してほしいと思う。それも、ただタイトルと概要を述べるだけではなく、実際に授業で本の中身を扱うことで内容を学生にわからせてほしい。
教訓:
良い論文とか文献は積極的に紹介する。 紹介する時には、内容まである程度紹介するとよい。 今回は読書感想文なので読んだ本の内容は紹介しない。ここでCS概論述べてもしょうがないし。 僕みたいな人間がこの本を読んでどういうふうに良いと思ったかをメモすることで、似た境遇の人とかの助けになれば良いな、という程度のモチベーションでした。</description></item><item><title>My First Post</title><link>https://naoyafurudono.github.io/posts/2022/march/my-first-post/</link><pubDate>Wed, 23 Mar 2022 11:41:44 +0900</pubDate><guid>https://naoyafurudono.github.io/posts/2022/march/my-first-post/</guid><description>Hello, Hugo and GitHub Pages このサイトはHugoとGitHub Pagesを用いて運用しています。
Hugo on GitHub GitHub Actionを用いたHugoの運用方法を解説しているドキュメントです。記載の方法に従うことで、mainブランチにmarkdownを書き、gh-pagesブランチに配布するためのHTMLなどを自動で生成できるようになります。 Quick Start Hugo Hugoの始め方。Hugoのインストールからlocalhost経由でのサイト表示の確認までを教えてくれます。</description></item></channel></rss>