<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on ツイートするには長すぎる</title><link>https://blog.nfurudono.com/tags/tech/</link><description>Recent content in Tech on ツイートするには長すぎる</description><generator>Hugo</generator><language>ja</language><copyright>&amp;copy;{currentYear} Naoya Furudono</copyright><lastBuildDate>Thu, 16 Jan 2025 00:33:56 +0900</lastBuildDate><atom:link href="https://blog.nfurudono.com/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>2025-01-16</title><link>https://blog.nfurudono.com/daily/2025-01-16/</link><pubDate>Thu, 16 Jan 2025 00:21:25 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2025-01-16/</guid><description>&lt;p>今日はたくさん設計をしたので満足。&lt;/p>
&lt;p>今週は電車で&lt;a href="https://amzn.asia/d/7BGeiUR">A Philosophy of Software Design&lt;/a>を読んでいる。
2023年3月8日にAmazonで注文したらしいので、入社前の時期に現実逃避で読んだのだろう。当時はあまりプログラミングをしたり、ずっと動き続けるシステムを設計したりする経験がなかった。なので実感を伴った教訓とは思えず、知識としてさらう感じだった。それはそれで良かったし生きてきたのだけど。
2024年の年初に配属されてソフトウェアをいろんな人と長く作ってきたことでいろんな辛みを体感できた。なので今読むアドバイスは経験を思い出しながら読む観点でも面白いし、まさに今考えていることへの一つの意見としても面白い。&lt;/p></description></item><item><title>2025-01-13</title><link>https://blog.nfurudono.com/daily/2025-01-13/</link><pubDate>Mon, 13 Jan 2025 13:17:35 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2025-01-13/</guid><description>&lt;h2>
&lt;a href="#%e3%83%93%e3%83%bc%e3%83%ab%e5%b7%a5%e5%a0%b4%e8%a6%8b%e5%ad%a6" id="ビール工場見学" class="anchor" aria-hidden="true">ビール工場見学&lt;/a>
&lt;/h2>
&lt;p>昨日は友達とキリンビール工場に行ってきた。500円のツアーがあってビール作りの概要を教えてもらいつつビールを飲ませてもらえる。だいぶ楽しかった。あの体験は優しさで成立していると思う。&lt;/p></description></item><item><title>wip Next.jsでのテストを自由自在に書けるようになりたい</title><link>https://blog.nfurudono.com/posts/learn-frontend-test/</link><pubDate>Sat, 11 Jan 2025 19:03:01 +0900</pubDate><guid>https://blog.nfurudono.com/posts/learn-frontend-test/</guid><description>&lt;p>Next.jsのアプリケーションでテストを自由自在に書けるようになることが目的。&lt;/p>
&lt;p>vitestを用いる。アサーションには&lt;code>expect&lt;/code>などを使ってマッチャを指定する。
expectや使えるマッチャは&lt;a href="https://vitest.dev/api/expect">https://vitest.dev/api/expect&lt;/a>が詳しい。&lt;/p></description></item><item><title>2025-01-11</title><link>https://blog.nfurudono.com/daily/2025-01-11/</link><pubDate>Sat, 11 Jan 2025 00:17:10 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2025-01-11/</guid><description>&lt;h2>
&lt;a href="#wishes" id="wishes" class="anchor" aria-hidden="true">wishes&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 日記管理CLIからhugo依存を抜きたい。Hugoはもう使わないので単にインストールの必要があり面倒になっている。テンプレファイルが好みじゃないのもある
&lt;ul>
&lt;li>tools/daily を拡張する。名前も変えてフルリプレイスでも良い。仕様を決めよう。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> ZedのAIと仲良くする機能を把握したい
&lt;ul>
&lt;li>した。便利。日記全部読ませるとめちゃくちゃ面白い。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Zedにコントリビュートできるようになっておきたい
&lt;ul>
&lt;li>お作法&lt;/li>
&lt;li>アーキテクチャの把握&lt;/li>
&lt;li>プログラミング能力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> CLIたくさん作りたい。ただプログラミングしたい
&lt;ul>
&lt;li>ちょっと作って満足した&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> フロントエンドのテストを完全に理解する
&lt;ul>
&lt;li>&lt;a href="https://dev.nfurudono.com/posts/learn-frontend-test">https://dev.nfurudono.com/posts/learn-frontend-test&lt;/a> でやる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 構文、意味、契約みたいな学生の頃は一般的だと思っていたけど世の中ではそうじゃなさそうな概念を説明して、みんなに抑えてもれえるように主張する&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 掃除する。部屋がめちゃくちゃ汚いので&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> ルンバのメンテナンスをする。なぜか秒でダスト容器がいっぱいになったと判定される
&lt;ul>
&lt;li>ダスト容器のセンサーがあってそこを綺麗にしたので多分解決する。フィルタを水洗いしちゃったのでそれを乾かしてから動かしてみる&lt;/li>
&lt;li>初めてだったゴミを集める周辺は簡単に分解できた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#ai%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%82%92%e8%a6%8b%e3%82%8b%e7%9b%ae%e3%81%8c%e5%a4%89%e3%82%8f%e3%81%a3%e3%81%9f" id="aiを使ったコーディングを見る目が変わった" class="anchor" aria-hidden="true">aiを使ったコーディングを見る目が変わった&lt;/a>
&lt;/h2>
&lt;p>Zedの機能を把握したことでAIを使ったコーディング能力が上がった。全体的なリファクタリングを受け入れるのはきついので、ロバストなコンポーネントを作り上げる必要がある。それらを全て把握して、気合いで組み立てる体験が最高。モデリング・抽象化・契約が効いてくるのではないだろうか。&lt;/p></description></item><item><title>漏れなくスタックトレースをGoで取りたい！</title><link>https://blog.nfurudono.com/posts/go-errors-stacktrace/</link><pubDate>Wed, 08 Jan 2025 00:12:35 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-errors-stacktrace/</guid><description>&lt;p>&lt;a href="https://github.com/k1LoW/errors">k1LoW/errors&lt;/a> でスタックトレースをエラーにつけられるようになる。便利なのだがトレースをプログラマが明示的に指示しないといけない。設定をコードベースで一回やれば終わりではなく、エラーの発生源で書かないといけない点が気になっている。書くこと自体は許容しているが、漏れがないように人間が頑張るのは許容したくない。漏れをなくすための仕組みを主張する。&lt;/p></description></item><item><title>2025-01-04</title><link>https://blog.nfurudono.com/daily/2025-01-04/</link><pubDate>Sat, 04 Jan 2025 04:07:56 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2025-01-04/</guid><description>&lt;h2>
&lt;a href="#rust%e3%81%ae%e3%82%8f%e3%81%8b%e3%82%89%e3%82%93%e3%83%9d%e3%82%a4%e3%83%b3%e3%83%88" id="rustのわからんポイント" class="anchor" aria-hidden="true">Rustのわからんポイント&lt;/a>
&lt;/h2>
&lt;p>過去に何個か一人でCLIツールを作ったことがある。そのときに雰囲気で乗り越えてしまいストレスの少ない綺麗な書き方を知りたかった概念をあげる。&lt;/p></description></item><item><title>2025-01-03</title><link>https://blog.nfurudono.com/daily/2025-01-03/</link><pubDate>Fri, 03 Jan 2025 18:45:14 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2025-01-03/</guid><description>&lt;h2>
&lt;a href="#go%e3%81%a7%e3%82%a8%e3%83%a9%e3%83%bc%e3%81%ab%e3%82%b9%e3%82%bf%e3%83%83%e3%82%af%e3%83%88%e3%83%ac%e3%83%bc%e3%82%b9%e5%85%a5%e3%82%8c%e3%82%8b%e8%a9%b1" id="goでエラーにスタックトレース入れる話" class="anchor" aria-hidden="true">Goでエラーにスタックトレース入れる話&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://dev.nfurudono.com/posts/go-errors-stacktrace">https://dev.nfurudono.com/posts/go-errors-stacktrace&lt;/a> に移転しました。&lt;/p>
&lt;h2>
&lt;a href="#%e6%8e%83%e9%99%a4" id="掃除" class="anchor" aria-hidden="true">掃除&lt;/a>
&lt;/h2>
&lt;p>大掃除は年末にしたのだけど、コーヒーグラインダーを掃除し忘れていたのでやった。結構な量の粉が中から出てきて驚いた。豆を砕く場所と粉が出てくる穴の間に傾斜した通路があってそこに溜まっていた。&lt;/p></description></item><item><title>2024-12-25</title><link>https://blog.nfurudono.com/daily/2024-12-25/</link><pubDate>Wed, 25 Dec 2024 23:27:09 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-25/</guid><description>&lt;h2>
&lt;a href="#%e5%a5%91%e7%b4%84%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e4%b9%b1%e6%96%87%e3%81%a7%e3%81%99" id="契約プログラミング乱文です" class="anchor" aria-hidden="true">契約プログラミング（乱文です）&lt;/a>
&lt;/h2>
&lt;p>関数の引数はそれぞれ何で、どんな性質を期待するかや、そのほかの事前条件を満たした上でこの関数を呼び出すと、その結果としてどんな返り値が得られてそれ以外にどんな副作用があるかを表明するのが関数の契約。文章を用いるのが簡単だし、伝えやすくするには図を用いても良いし、型とかバリデーションのための式で表現しても良い。何にしても契約を表明すると楽しくプログラミングできる。&lt;/p></description></item><item><title>2024-12-15</title><link>https://blog.nfurudono.com/daily/2024-12-15/</link><pubDate>Sun, 15 Dec 2024 14:46:40 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-15/</guid><description>&lt;h2>
&lt;a href="#filter%e3%81%abasync%e3%82%92%e6%b8%a1%e3%81%97%e3%81%a6%e3%81%af%e3%81%84%e3%81%91%e3%81%aa%e3%81%84" id="filterにasyncを渡してはいけない" class="anchor" aria-hidden="true">filterにasyncを渡してはいけない&lt;/a>
&lt;/h2>
&lt;p>日記はマークダウンで書いていて、タイトルとか公開・非公開とかはフロントマターに書いている。それをパースしてよしなに処理してHTMLに落としたり、そもそも公開しないようにしている。それらの処理はTSで書いている。&lt;/p></description></item><item><title>2024-12-13</title><link>https://blog.nfurudono.com/daily/2024-12-13/</link><pubDate>Fri, 13 Dec 2024 20:11:32 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-13/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> kamakura.goの感想とかを書く&lt;/li>
&lt;/ul>
&lt;!--
# kamakura.goで発表した

https://kamakurago.connpass.com/event/336353/

https://x.com/fujiwara/status/1867533095584641426 たまたま？ カヤック3名 v.s. ペパボ3名だったみたい。

「Protocol Buffersスキーマ定義から GoのCLIを生成する」というタイトルでお話をした。
スライドは https://speakerdeck.com/naoyafurudono/protocol-bufferssukimading-yi-kara-gonocliwosheng-cheng-suru に公開してある。

最初にバッチとして実装しておいて、後からhttpを喋ってストリーミング処理できるようにしたいと思うことがあってそれにハマりそうという感想をいただいた。

## kongはいいぞ

https://x.com/fujiwara/status/1867517006532260316
--></description></item><item><title>2024-12-12</title><link>https://blog.nfurudono.com/daily/2024-12-12/</link><pubDate>Thu, 12 Dec 2024 01:52:31 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-12/</guid><description>&lt;blockquote>
&lt;p>We recommend that all third-party code generators be written as plugins, as this allows all generators to provide a consistent interface and share a single parser implementation.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://protobuf.dev/reference/other/#plugins">https://protobuf.dev/reference/other/#plugins&lt;/a>&lt;/p>
&lt;p>はえ〜って感じ。Goのライブラリはだいぶ使い勝手良かったのでまあ確かにと思ってる。&lt;/p></description></item><item><title>2024-12-05</title><link>https://blog.nfurudono.com/daily/2024-12-05/</link><pubDate>Thu, 05 Dec 2024 22:58:31 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-12-05/</guid><description>&lt;p>viperってinit使わないといけないのかな。
viperに依存性を注入するような使い方をしたい。Facadeを受け取ってCLIを返すようなCLIジェネレータを定義しようとしていて、CLIジェネレータを実装するためにviperの諸々をinitとかで終えようと思うと困る。実行時にfacadeを入れたいので。&lt;/p></description></item><item><title>2024-11-28</title><link>https://blog.nfurudono.com/daily/2024-11-28/</link><pubDate>Thu, 28 Nov 2024 16:12:48 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-28/</guid><description>&lt;p>Reactのカスタムフックの心をわかっていなかったけど、クロージャに変数をキャプチャさせて、状態をもつクロージャ（の組）を返す関数がカスタムフックぽい。組と言ったのは、getterとsetterが別々に提供されることがあるから。例えば &lt;code>const [v, setV] = useState()&lt;/code> は &lt;code>v&lt;/code> がgetterで &lt;code>setV&lt;/code> がsetterと思える。&lt;/p></description></item><item><title>2024-11-27</title><link>https://blog.nfurudono.com/daily/2024-11-27/</link><pubDate>Wed, 27 Nov 2024 19:19:42 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-27/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://incepter.github.io/how-react-works/">https://incepter.github.io/how-react-works/&lt;/a> これ面白そうなので読む。定期的にくるReactの仕組みを深掘りしたくなる時期。&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> ブログのMakefileを書く&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#branded-type%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f" id="branded-typeを使ってみた" class="anchor" aria-hidden="true">Branded typeを使ってみた&lt;/a>
&lt;/h2>
&lt;p>Branded typeはTSでnominal typingっぽいことをするためのプログラミングテクニックの一つ。&lt;a href="https://zenn.dev/okunokentaro/articles/01gmpkp9gzfyr1za5wvrxt0vy6#branded-types">Branded Typesを導入してみる / TypeScript一人カレンダー&lt;/a> が詳しい。&lt;/p></description></item><item><title>2024-11-26</title><link>https://blog.nfurudono.com/daily/2024-11-26/</link><pubDate>Tue, 26 Nov 2024 09:57:07 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-26/</guid><description>&lt;h2>
&lt;a href="#%e3%82%a2%e3%83%bc%e3%82%ad%e3%83%86%e3%82%af%e3%83%81%e3%83%a3%e3%82%ab%e3%83%b3%e3%83%95%e3%82%a1%e3%83%ac%e3%83%b3%e3%82%b9%e3%83%a1%e3%83%a2" id="アーキテクチャカンファレンスメモ" class="anchor" aria-hidden="true">アーキテクチャカンファレンスメモ&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://architecture-con.findy-tools.io/">https://architecture-con.findy-tools.io/&lt;/a> これに来ている。&lt;/p>
&lt;p>&lt;a href="https://findy-tools.io/events/archives/architecture-con-2024/1/materials">登壇資料のまとめがあるとのこと&lt;/a>。&lt;/p>
&lt;p>これはあくまで僕のメモであって、発表とか僕がお話しした人がこのまま主張したわけではないです。変なところがあれば僕のせいだし、良い主張があれば彼らのおかげです。繰り返しですが僕のメモなので第三者が読んで何かに活かしたり議論の種にすることは、しない想定です。僕が便利なのでインターネットにおいておくだけ。&lt;/p></description></item><item><title>2024-11-04</title><link>https://blog.nfurudono.com/daily/2024-11-04/</link><pubDate>Mon, 04 Nov 2024 17:14:21 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-04/</guid><description>&lt;p>ちょっと前からソフトウェア工学を触っている。興味から学んでいるというよりは必要に駆られて学んでいる側面が大きい。楽しい仕事をするためにつまらない状況を抑え込む力を身につけるために学んでいる。&lt;/p></description></item><item><title>2024-10-27</title><link>https://blog.nfurudono.com/daily/2024-10-27/</link><pubDate>Sun, 27 Oct 2024 01:20:03 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-27/</guid><description>&lt;h2>
&lt;a href="#%e7%b5%90%e5%a9%9a%e5%bc%8f%e6%ba%96%e5%82%99" id="結婚式準備" class="anchor" aria-hidden="true">結婚式準備&lt;/a>
&lt;/h2>
&lt;p>友達の結婚式に今度出席するので真面目に準備してみる。普段スーツを着ないので礼服を着るのはコスプレみたいでドキドキする。&lt;/p></description></item><item><title>2024-10-26</title><link>https://blog.nfurudono.com/daily/2024-10-26/</link><pubDate>Sat, 26 Oct 2024 22:50:25 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-26/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> aboutページの収取をするプラグインを実装して組み込んだ。あとはそれをいい感じに表示する必要がある&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 今度人の結婚式に出るので身だしなみとか常識を身につける・髪切るとか服を用意する計画を立てる
&lt;ul>
&lt;li>受付やるらしいのでちゃんとした方が良さそう&lt;/li>
&lt;li>礼服着れるか確認しておくか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> helm完全に理解する。リリースとか意味わからん。installって何？kubectl applyとの関係は？&lt;/li>
&lt;/ul></description></item><item><title>2024-10-10</title><link>https://blog.nfurudono.com/daily/2024-10-10/</link><pubDate>Thu, 10 Oct 2024 19:29:06 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-10/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> protobufとかsqlcでファイル生成をするツールを使ってチーム開発をしているとすごくコンフリクトして辛い。生成するファイルを分割して、例えばrpcとかmessage単位にファイル（パッケージではない！）を分ければgitのコンフリクトは避けられる。パッケージも一緒なので振る舞いには影響しない。&lt;/li>
&lt;/ul></description></item><item><title>2024-10-06</title><link>https://blog.nfurudono.com/daily/2024-10-06/</link><pubDate>Sun, 06 Oct 2024 14:07:24 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-06/</guid><description>&lt;h2>
&lt;a href="#llm-%e3%82%92%e5%b0%82%e9%96%80%e5%ae%b6%e3%81%a0%e3%81%a8%e6%80%9d%e3%81%88%e3%81%aa%e3%81%84" id="llm-を専門家だと思えない" class="anchor" aria-hidden="true">LLM を専門家だと思えない&lt;/a>
&lt;/h2>
&lt;p>LLMはコンパイラとかみたいに説明とか分析を出力してくれるものではあるけど、
LLMはコンパイラよりも人間に近いものだと思っている。コンパイラみたいな決定的な出力をするツールに対して良い入力を与えてその出力をそのまま共有することには価値がたくさんあるけれど、
LLMから得られた出力をそのまま「LLMに聞いたらこう返してくれました！」っていうのは（少なくとも現代使えるLLMのレベルでは）意味が薄いと感じる。&lt;/p></description></item><item><title>2024-09-16</title><link>https://blog.nfurudono.com/daily/2024-09-16/</link><pubDate>Mon, 16 Sep 2024 02:20:29 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-09-16/</guid><description>&lt;h2>
&lt;a href="#%e4%bb%8a%e6%97%a5%e3%82%84%e3%82%8b%e3%81%93%e3%81%a8" id="今日やること" class="anchor" aria-hidden="true">今日やること&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 掃除
&lt;ul>
&lt;li>ルンバを起動したのでok&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 外出
&lt;ul>
&lt;li>電車乗るくらいの外出をする。秋物出たかな。あるいは外で使うと幸せになれるグッツを買うか。&lt;/li>
&lt;li>ランニングパンツと靴下を買う。帰省でランニングのズボンを置いてきたのと、靴下が大体ボロボロになってきたので。&lt;/li>
&lt;li>靴下は買った。ランニングパンツはまあいっかと思って買わず。そのほかに秋に向けて服を見たけどピンと来なかったので特に買わずだった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 本読む。k8sのあれ。あとは認証の技術気になるので学ぶ。認可も気になる。
&lt;ul>
&lt;li>SSL&lt;/li>
&lt;li>ドメイン&lt;/li>
&lt;li>k8sのRBAC&lt;/li>
&lt;li>選ばれたのはカスタムコントローラでした。ググって見つけたyahooの人のスライドが概要を掴むのにいい感じだった。
&lt;ul>
&lt;li>&lt;a href="https://speakerdeck.com/hhiroshell/platform-engineering-and-kubernetes">https://speakerdeck.com/hhiroshell/platform-engineering-and-kubernetes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> todoをリストアップする拡張の実装&lt;/li>
&lt;li>&lt;del>todoの拡張、出先でチェック入れたくなりそうなので、githubでの編集へのリンクをつけたい&lt;/del>
&lt;ul>
&lt;li>やっぱりいいや。出先ではのんびりしよう。todoのことなんて忘れればいい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#todo%e3%82%92%e3%83%aa%e3%82%b9%e3%83%88%e3%82%a2%e3%83%83%e3%83%97%e3%81%99%e3%82%8b%e3%83%9a%e3%83%bc%e3%82%b8%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%97%e3%81%9f" id="todoをリストアップするページを実装した" class="anchor" aria-hidden="true">todoをリストアップするページを実装した&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://diary.nfurudono.com/todos/">https://diary.nfurudono.com/todos/&lt;/a>に実装した。これでもう過去のtodoを忘れない。収集とレンダリングの両方が必要でだるかった。特にレンダリングはunifiedのアーキテクチャを理解してなくて手間取った。今の実装がunifiedのアーキテクチャに沿っているか自信がない。&lt;/p></description></item><item><title>Goのanalysisとtypesに入門する</title><link>https://blog.nfurudono.com/posts/go-static-analysis/</link><pubDate>Sat, 31 Aug 2024 15:02:41 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-static-analysis/</guid><description>&lt;h2>
&lt;a href="#%e6%a6%82%e8%a6%81" id="概要" class="anchor" aria-hidden="true">概要&lt;/a>
&lt;/h2>
&lt;p>Goで静的解析してリンターを実装したい。具体的には、あるT1インターフェース型の変数がスコープにあるときは、T1よりゆるい任意の型の使用を禁止する、みたいな制約を入れたい。その辺に転がっている記事ではASTを覗いてみたり、SSAを覗いてみたりするようだけど、ASTとその型をまともに扱っていつつ、いい感じに静的解析ツールとして仕上げる記事を見つけられなかった。&lt;/p></description></item><item><title>2024-08-15</title><link>https://blog.nfurudono.com/daily/2024-08-15/</link><pubDate>Thu, 15 Aug 2024 15:04:52 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-08-15/</guid><description>&lt;p>日記をnextjsでビルドして、cloudflare pagesにデプロイするようにした。cnameの設定が効くようになれば、&lt;a href="https://diary.nfurudono.com">https://diary.nfurudono.com&lt;/a>から見えるようになるはず。&lt;/p>
&lt;p>cloudflareのアカウントを初めて作って設定したが、体験よかった。デプロイとか周りの開発のためにCLIツールやそれのgithub actionsバインディングが提供されていて、サクッとデプロイできた。記念すべき初デプロイの成功をメモしておく&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/actions/runs/10399555684/job/28798614059">https://github.com/naoyafurudono/naoyafurudono.github.io/actions/runs/10399555684/job/28798614059&lt;/a>&lt;/p></description></item><item><title>2024-08-03</title><link>https://blog.nfurudono.com/daily/2024-08-03/</link><pubDate>Sat, 03 Aug 2024 12:14:16 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-08-03/</guid><description>&lt;h2>
&lt;a href="#%e4%ba%8b%e6%a5%ad%e3%81%a7%e4%bd%bf%e3%81%86%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%82%92%e8%a8%ad%e8%a8%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae%e8%a9%b1" id="事業で使うシステムを設計するときの話" class="anchor" aria-hidden="true">事業で使うシステムを設計するときの話&lt;/a>
&lt;/h2>
&lt;p>ソフトウェアを設計するときにはどこを変えやすくしたいか（どんな変更をしやすくしたいか）を把握したい。
Expression probremは必ずしも解決しなくてよいと思っていて、変更に必要な気合がどれくらいかを把握したうえでそれを許容できるかが論点だと思う。&lt;/p></description></item><item><title>AHK入門</title><link>https://blog.nfurudono.com/posts/ahk/</link><pubDate>Sun, 28 Jul 2024 01:41:34 +0900</pubDate><guid>https://blog.nfurudono.com/posts/ahk/</guid><description>&lt;p>Windowsマシンでキーボード操作が不便なので導入する。悪態をつきながらも使っている人を知っているので内容を理解していないが期待している。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" id="インストール" class="anchor" aria-hidden="true">インストール&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.autohotkey.com/">https://www.autohotkey.com/&lt;/a> 公式ページからバイナリを落とせる。インストールするとwelcome画面が開いたのだが、そこに「コンパイルする」ボタンがあって、ちょっと不安になる。僕はプログラムをボタンを押してコンパイルしないといけない？&lt;/p></description></item><item><title>認可に入門 wip</title><link>https://blog.nfurudono.com/posts/learn-authorization/</link><pubDate>Mon, 24 Jun 2024 20:24:08 +0900</pubDate><guid>https://blog.nfurudono.com/posts/learn-authorization/</guid><description>&lt;p>&lt;a href="https://www.osohq.com/academy">https://www.osohq.com/academy&lt;/a>
これを読んで認可に入門します。頑張るぞ〜！&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a4%e3%83%b3%e3%83%88%e3%83%ad" id="イントロ" class="anchor" aria-hidden="true">イントロ&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.osohq.com/academy/authorization-academy">https://www.osohq.com/academy/authorization-academy&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Chapter II: What authorization is: how to organize your authorization code
Chapter III: Role-based access control: grouping permissions in your app into roles like User and Admin
Chapter IV: Relationship-based control: grouping permissions by relationship, like &amp;ldquo;the creator of a post may edit that post&amp;rdquo;
Chapter V: Authorization enforcement: once your app has decided to allow or deny access, what do you do with that decision?&lt;/p></description></item><item><title>半開閉区間</title><link>https://blog.nfurudono.com/posts/semi-open-interval/</link><pubDate>Wed, 29 May 2024 20:57:08 +0900</pubDate><guid>https://blog.nfurudono.com/posts/semi-open-interval/</guid><description>&lt;h2>
&lt;a href="#%e5%8f%82%e7%85%a7" id="参照" class="anchor" aria-hidden="true">参照&lt;/a>
&lt;/h2>
&lt;p>コンピュータで区間処理するときは半開閉区間で持つことが多い気がしている。もはや信仰のレベルで身についているので自分一人で決めて終わりなときはそれで良いのだが、説明が必要なときに困る。そのときのために良さげな参照を集めておく。&lt;/p></description></item><item><title>RubyKaigi2024参加メモ</title><link>https://blog.nfurudono.com/posts/rubykaigi2024/</link><pubDate>Sat, 18 May 2024 18:51:00 +0900</pubDate><guid>https://blog.nfurudono.com/posts/rubykaigi2024/</guid><description>&lt;p>RubyKaigi2024に参加したので、思ったことをメモしておきます。&lt;/p>
&lt;p>参加したセッションはこちら: &lt;a href="https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3">https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3&lt;/a>&lt;/p>
&lt;h2>
&lt;a href="#shopify%e3%81%8c%e3%81%99%e3%81%94%e3%81%84" id="shopifyがすごい" class="anchor" aria-hidden="true">shopifyがすごい&lt;/a>
&lt;/h2>
&lt;p>今回のセッションをいくつか聞いてShopifyのやり方に憧れるようになった。エンジニアリングをしていく上での姿勢として、課題に対して上流から対処しよう、みたいな箴言があってそれが心に残っている。
ShopifyのRuby周りのチームはまさにそれを地で行っていると今回のセッションを聞いて感じたそういうチームに所属して（作って？）良いエンジニアリングをしていきたいと思っていたのだが、これまでは具体的なイメージいを持っていなかった。&lt;/p></description></item><item><title>ElmアーキテクチャをReactで実現する話</title><link>https://blog.nfurudono.com/posts/elm-architecture/</link><pubDate>Thu, 18 Apr 2024 00:58:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/elm-architecture/</guid><description>&lt;h2>
&lt;a href="#elm%e3%82%a2%e3%83%bc%e3%82%ad%e3%83%86%e3%82%af%e3%83%81%e3%83%a3" id="elmアーキテクチャ" class="anchor" aria-hidden="true">Elmアーキテクチャ&lt;/a>
&lt;/h2>
&lt;p>リアクティブプログラミングの勉強をしていた頃にElm言語を知って好きになった（全然コード書いてないけど）。特徴はElmアーキテクチャにあると思っている。
Webアプリケーションの大体のフロントエンドアプリケーションはこう言うアーキテクチャで表現できるはず、みたいなことを言っていて、そのアーキテクチャが簡単なので気に入ったのだろう。&lt;/p></description></item><item><title>2024-03-26</title><link>https://blog.nfurudono.com/daily/2024-03-26/</link><pubDate>Tue, 26 Mar 2024 00:12:48 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-03-26/</guid><description>&lt;p>イベントソーシング？と言うのかわからないけど、イベントを全部持っておけば現時点での状態はイベントを全部みて計算できるので永続化しなくて良くない？みたいな考え方がある（はず）。&lt;/p></description></item><item><title>Nextjsのプロジェクトにstorybookを導入してみた</title><link>https://blog.nfurudono.com/posts/install-storybook-next/</link><pubDate>Tue, 26 Mar 2024 01:51:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/install-storybook-next/</guid><description>&lt;h2>
&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8" id="やったこと" class="anchor" aria-hidden="true">やったこと&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/timer/pull/1">https://github.com/naoyafurudono/timer/pull/1&lt;/a>&lt;/p>
&lt;p>このプルリクエストで頑張った。コミットメッセージにやったことは書いてある。&lt;/p>
&lt;h2>
&lt;a href="#%e5%8f%82%e8%80%83" id="参考" class="anchor" aria-hidden="true">参考&lt;/a>
&lt;/h2>
&lt;p>公式ドキュメントがしっかりしてそう。storybookが内部で使っているwebpackが&lt;code>@&lt;/code> インポートを読めないみたいで、プラグインを入れる必要があった。&lt;/p></description></item><item><title>2024-03-20</title><link>https://blog.nfurudono.com/daily/2024-03-20/</link><pubDate>Wed, 20 Mar 2024 00:35:14 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-03-20/</guid><description>&lt;p>Webアプリケーションのテストをどう実施したものかと最近考えることが多い。
Webアプリは雰囲気で変更したいはずで（ソフトウェアって大体そう？）、またテストは長持ちしてほしいと思う。&lt;/p></description></item><item><title>2024-03-09</title><link>https://blog.nfurudono.com/daily/2024-03-09/</link><pubDate>Sat, 09 Mar 2024 00:12:39 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-03-09/</guid><description>&lt;h2>
&lt;a href="#web%e3%83%95%e3%83%ad%e3%83%b3%e3%83%88%e3%82%a8%e3%83%b3%e3%83%89%e5%a4%a7%e5%a4%89%e3%81%9d%e3%81%86" id="webフロントエンド大変そう" class="anchor" aria-hidden="true">Webフロントエンド大変そう&lt;/a>
&lt;/h2>
&lt;p>フロントエンドのモデルとRPCについて考えてみたい。&lt;/p>
&lt;p>Webアプリケーションのフロントエンドがリッチなときに、テストをどんな感じで書こうかとか、そもそもアプリケーションをどんな感じで書こうかと悩む。僕は悩んでいる。&lt;/p></description></item><item><title>2024-02-17</title><link>https://blog.nfurudono.com/daily/2024-02-17/</link><pubDate>Sat, 17 Feb 2024 17:55:29 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-02-17/</guid><description>&lt;p>glangに&lt;a href="https://github.com/golang/go/issues/61405">generatorを入れようというプロポーザル&lt;/a>があって、試験的に実装されているみたい。いくつかのパターンがあるけど、&lt;a href="https://go.dev/play/p/93W3jTQjBk0?v=gotip">だいたいこんな感じで使える (The Go Playground)&lt;/a>。&lt;/p>
&lt;p>ジェネレータとして使われる関数は定義の段階では普通の関数と区別がつかないような構文定義をされている。コンパイラやランタイムの実装が気になるし、静的解析ツールが大変なことにならないかが心配。&lt;/p></description></item><item><title>2024-02-13</title><link>https://blog.nfurudono.com/daily/2024-02-13/</link><pubDate>Tue, 13 Feb 2024 18:16:15 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-02-13/</guid><description>&lt;p>今日1on1で教えてもらった。ロールモデルとして追っていく。&lt;a href="https://scrapbox.io/kawasima/%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB">https://scrapbox.io/kawasima/%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB&lt;/a>&lt;/p></description></item><item><title>2024-02-12</title><link>https://blog.nfurudono.com/daily/2024-02-12/</link><pubDate>Mon, 12 Feb 2024 16:54:41 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-02-12/</guid><description>&lt;h2>
&lt;a href="#web%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e5%ae%9f%e8%a3%85%e6%96%b9%e9%87%9d%e3%82%92%e8%80%83%e3%81%88%e3%81%a6%e3%81%bf%e3%81%9f%e3%83%a1%e3%83%a2" id="webアプリケーションの実装方針を考えてみたメモ" class="anchor" aria-hidden="true">Webアプリケーションの実装方針を考えてみたメモ&lt;/a>
&lt;/h2>
&lt;p>管理画面の設計について考えてみる。
Webアプリケーションでもろもろを設定する際のUI設計を考えている。&lt;/p></description></item><item><title>推し言語機能 Racket編</title><link>https://blog.nfurudono.com/posts/fav-racket-features/</link><pubDate>Tue, 19 Dec 2023 22:33:05 +0900</pubDate><guid>https://blog.nfurudono.com/posts/fav-racket-features/</guid><description>&lt;p>この記事は&lt;a href="https://adventar.org/calendars/8634">GMOペパボエンジニア Advent Calendar 2023 🎅会場&lt;/a>の19日の記事です！&lt;/p>
&lt;p>昨日はyagijinさんのReactやってる人向けのSwiftUI入門でした。
Swiftに興味があるReact信者の僕のために書いてくれたのかと錯覚しました。これを期にSwift UI入門しようと思います。
Swift UIは双方向バインディングを採用しているとのことなので、Vueとの類似もありそうですね。&lt;/p></description></item><item><title>2023-10-28</title><link>https://blog.nfurudono.com/daily/2023-10-28/</link><pubDate>Sat, 28 Oct 2023 00:18:23 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-10-28/</guid><description>&lt;p>ジャンププラスの表示がどなっているか気になって開発者ツールでみたらなんかすごかった。アプリケーションのストレージにページをバラバラにしてパッチワークみたいにしたデータがあって、恐らくそれをいい感じに繋ぎ合わせて表示する感じで&lt;a href="https://developer.mozilla.org/ja/docs/Web/HTML/Element/canvas">canvas要素&lt;/a>を使っているみたい。スクレイピングとかで漫画を引っこ抜かれないための仕組みなんだろうし、パッとわかるものではないだろうけど気になる。はてなのGigaViewrが使われているとのこと。ヒントとか開発話みたいなものが聞けないかなと思って&lt;a href="https://developer.hatenastaff.com/entry/2022/06/15/173000">ポッドキャスト&lt;/a>を聞いている。&lt;/p></description></item><item><title>2023-10-27</title><link>https://blog.nfurudono.com/daily/2023-10-27/</link><pubDate>Thu, 26 Oct 2023 23:53:16 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-10-27/</guid><description>&lt;p>&lt;code>https&lt;/code> とかで通信をするときはローカルにインストールされているCA証明書を参照する。
ubuntuの場合 &lt;code>/etc/ssl/certs/ca-certificates.crt&lt;/code> がそれで、適当に名前を変えるとhttpsでcurlできなくなる。&lt;/p></description></item><item><title>2023-09振り返り</title><link>https://blog.nfurudono.com/posts/2023-09/</link><pubDate>Mon, 02 Oct 2023 00:13:15 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2023-09/</guid><description>&lt;p>今月はインカレの運営準備と仕事を頑張った。またカレーとボルダリングを始めた。&lt;/p>
&lt;p>インカレでは人に仕事を回す仕事でしっかりキャパオーバーした経験をできた。おかげで価値観を少し変えることができて、瞬殺できるタスクはすぐに瞬殺するのが楽だと思えるようになったし、瞬殺できない仕事もなんとか小さくしようともがけるようになった。この辺りは仕事でも意識しているところで、二つのサンプルがうまいこと僕の中で補い合って学びを得る機械になってくれた形だと思う。どちらもちゃんとした人たちが一緒に仕事をしてくれてフィードバックもくれる環境だから実現しているのだと思う。感謝だし、この環境に身をおけた運と自分を褒めてあげたい。&lt;/p></description></item><item><title>GASでスライド生成</title><link>https://blog.nfurudono.com/posts/generate-slides-from-template/</link><pubDate>Sun, 01 Oct 2023 23:29:39 +0900</pubDate><guid>https://blog.nfurudono.com/posts/generate-slides-from-template/</guid><description>&lt;p>Google Slidesで作成したテンプレートファイルに文字列を置換する形でスライドを生成するスクリプトをChat GPTに書いてもらったのでメモ。&lt;/p>
&lt;pre>&lt;code class="language-aa">+--------------------------------+
| |
| {{氏名}} |
| |
| |
| {{住所}} |
+--------------------------------+
&lt;/code>&lt;/pre>
&lt;p>みたいなスライドを作って、&lt;/p></description></item><item><title>2023-09-09</title><link>https://blog.nfurudono.com/daily/2023-09-09/</link><pubDate>Sat, 09 Sep 2023 22:52:30 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-09-09/</guid><description>&lt;h2>
&lt;a href="#%e8%a8%ad%e5%ae%9a%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%81%afjson%e6%b4%be" id="設定ファイルはjson派" class="anchor" aria-hidden="true">設定ファイルはjson派&lt;/a>
&lt;/h2>
&lt;p>tomlもyamlも難しいので、みんなjsonを書けばいいのにと思う。
Goとか静的型付け言語とかが流行って、読みやすさの意義が重要視されている時代なはずなのに、設定ファイルは書きやすさとか、見栄えの良さが重視されていそうなフォーマットが人気なのが解せない。
jsonがナウいんじゃないかと思うし、好みとしてもjsonがいいなと思う。&lt;/p></description></item><item><title>契約と型検査</title><link>https://blog.nfurudono.com/posts/contract-programming/</link><pubDate>Thu, 31 Aug 2023 21:49:38 +0900</pubDate><guid>https://blog.nfurudono.com/posts/contract-programming/</guid><description>&lt;p>プログラミングの型検査・契約・テストについて書きます。お酒を飲みながら書きました。注意は払ったつもりですが、変なところがあるかもしれません。&lt;/p>
&lt;ul>
&lt;li>契約とは何か
&lt;ul>
&lt;li>例を含める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>どんな嬉しさがあるか&lt;/li>
&lt;li>型検査との兼ね合い&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e5%a5%91%e7%b4%84%e3%81%a8%e3%81%af%e4%bd%95%e3%81%8b" id="契約とは何か" class="anchor" aria-hidden="true">契約とは何か&lt;/a>
&lt;/h2>
&lt;p>契約 (contract) とはプラグラムの関数の入出力に関する規約のことです。例えば整数の割り算をする &lt;code>div&lt;/code> 関数は、二つの整数を受け取って商を返す関数だとしましょう。このとき、入力の二つの値は&lt;/p></description></item><item><title>dotfilesのセットアップスクリプトを書いた</title><link>https://blog.nfurudono.com/posts/dotfiles-setup/</link><pubDate>Thu, 17 Aug 2023 01:15:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/dotfiles-setup/</guid><description>&lt;h2>
&lt;a href="#%e5%8b%95%e6%a9%9f" id="動機" class="anchor" aria-hidden="true">動機&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/dotfiles/tree/main">dotfiles&lt;/a>をGitHubで管理しているのだが、今までは設定ファイルの管理だけで、インストールは手動で行なっていた。設定ファイルを使いまわせるだけでだいぶ便利なんだけど、コンテナ環境の中で作業したくなると、手動インストールに耐えられなくなる。そこで重い腰を上げてセットアップを自動化した。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8" id="やったこと" class="anchor" aria-hidden="true">やったこと&lt;/a>
&lt;/h2>
&lt;h3>
&lt;a href="#cli%e7%92%b0%e5%a2%83%e3%81%ae%e3%82%bb%e3%83%83%e3%83%88%e3%82%a2%e3%83%83%e3%83%97%e3%82%92%e7%b0%a1%e5%8d%98%e3%81%ab%e3%81%97%e3%81%9f" id="cli環境のセットアップを簡単にした" class="anchor" aria-hidden="true">CLI環境のセットアップを簡単にした&lt;/a>
&lt;/h3>
&lt;p>&lt;code>git&lt;/code> のインストールと以下の実行でok。
nvimとかfishとかcargoとかが入る。&lt;/p></description></item><item><title>2023-07-29</title><link>https://blog.nfurudono.com/daily/2023-07-29/</link><pubDate>Sat, 29 Jul 2023 13:02:36 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-29/</guid><description>&lt;p>ARM64でいろんなサイズの整数の足し算をする方法を整理する。サイズごとに演算が用意されているわけではなく、レジスタの指定方法（x,wの使い分け）や、レジスタのコンテンツをいい感じにすることで、
byte, half, word, double wordの足し算を実現する（と思ってよさそう）。&lt;/p></description></item><item><title>2023-07-22</title><link>https://blog.nfurudono.com/daily/2023-07-22/</link><pubDate>Sat, 22 Jul 2023 11:56:59 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-22/</guid><description>&lt;h2>
&lt;a href="#%e3%81%b5%e3%81%ab%e3%82%83%e3%81%a3%e3%81%a8%e3%81%97%e3%81%a6%e3%82%8b" id="ふにゃっとしてる" class="anchor" aria-hidden="true">ふにゃっとしてる&lt;/a>
&lt;/h2>
&lt;p>コンパイラの実装で、次はポインタ算術をやる。演算子がオーバーローディングされているので型検査が必要。今は環境とかのデータ構造を設計する気力がなくて、パソコンを前にふにゃっとしている。お昼ご飯食べたら考える。&lt;/p></description></item><item><title>2023-07-21</title><link>https://blog.nfurudono.com/daily/2023-07-21/</link><pubDate>Fri, 21 Jul 2023 23:18:37 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-21/</guid><description>&lt;h2>
&lt;a href="#%e8%87%aa%e4%bd%9cc%e3%82%b3%e3%83%b3%e3%83%91%e3%82%a4%e3%83%a9%e3%81%ae%e9%80%b2%e6%8d%97" id="自作cコンパイラの進捗" class="anchor" aria-hidden="true">自作Cコンパイラの進捗&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/comp">https://github.com/naoyafurudono/comp&lt;/a>&lt;/p>
&lt;p>早いもので作り始めてから2週間たったみたい。もっとサクサク進むと思っていたのだけど、しばらく楽しめそう。&lt;/p></description></item><item><title>2023-07-19</title><link>https://blog.nfurudono.com/daily/2023-07-19/</link><pubDate>Wed, 19 Jul 2023 23:34:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-19/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io">実装しているCコンパイラ&lt;/a>
で関数定義をできるようになった🎉。今までも既存のコンパイラで作ったオブジェクトファイルとリンクすれば呼び出すことはできていたが、自分で定義した関数がある程度ちゃんと呼べるようになった。&lt;/p></description></item><item><title>2023-07-17</title><link>https://blog.nfurudono.com/daily/2023-07-17/</link><pubDate>Mon, 17 Jul 2023 18:47:03 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-17/</guid><description>&lt;p>Cコンパイラをarm macで実装しているのだけど、&lt;code>a=b=0; return b;&amp;quot;&lt;/code>みたいなコードがセグメント違反で落ちる。
lldbで調べてみると、main関数は正しい値を&lt;code>w0&lt;/code>にセットして&lt;code>ret&lt;/code>できていそうなんだけどその後の動的リンクされたコードでエラーが発生しているみたい。設定する値を変えるとエラーにならずに実行が終了する。謎である。&lt;/p></description></item><item><title>arm64のメモ</title><link>https://blog.nfurudono.com/posts/arm64/</link><pubDate>Sat, 15 Jul 2023 16:17:21 +0900</pubDate><guid>https://blog.nfurudono.com/posts/arm64/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/comp">Cコンパイラを実装する&lt;/a>ためにarm64のことを調べている。この記事はそのメモ。&lt;/p>
&lt;h2>
&lt;a href="#%e5%85%ac%e5%bc%8f%e3%83%89%e3%82%ad%e3%83%a5%e3%83%a1%e3%83%b3%e3%83%88" id="公式ドキュメント" class="anchor" aria-hidden="true">公式ドキュメント&lt;/a>
&lt;/h2>
&lt;p>よくあるソフトウェアのライブラリについているドキュメントとは毛色が違う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.arm.com/documentation/den0024/a/An-Introduction-to-the-ARMv8-Instruction-Sets">Armv8-A Instruction Set Architecture&lt;/a>が優しい
&lt;ul>
&lt;li>&lt;a href="https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/Learn%20the%20Architecture/Armv8-A%20Instruction%20Set%20Architecture.pdf?revision=ebf53406-04fd-4c67-a485-1b329febfb3e">PDF版もある&lt;/a>。空白多めのシングルカラム39ページなのでサクッと読める。最初に読んでおくと幸せになれたかも。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/ARM-software/abi-aa/releases/download/2023Q1/aapcs64.pdf">Procedure Call Standard for the Arm® 64-bit Architecture (AArch64) (pdf)&lt;/a>がCコンパイラを実装するときに気になる細かいことをコンパクトにまとめてそうな印象。&lt;/li>
&lt;li>上のドキュメントを含む&lt;a href="https://github.com/ARM-software/abi-aa/releases">公式のリンク集がある&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e3%83%84%e3%83%bc%e3%83%ab" id="ツール" class="anchor" aria-hidden="true">ツール&lt;/a>
&lt;/h2>
&lt;p>Arm macを使っている人の話です。&lt;/p></description></item><item><title>2023-07-08</title><link>https://blog.nfurudono.com/daily/2023-07-08/</link><pubDate>Sat, 08 Jul 2023 12:39:28 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-08/</guid><description>&lt;h2>
&lt;a href="#%e3%83%8e%e3%83%bc%e3%83%88%e3%83%91%e3%82%bd%e3%82%b3%e3%83%b3%e3%81%ae%e6%81%a9%e6%81%b5" id="ノートパソコンの恩恵" class="anchor" aria-hidden="true">ノートパソコンの恩恵&lt;/a>
&lt;/h2>
&lt;p>椅子に座るほどの元気がなくてもパソコン座れるので楽しい。気軽にコーディングできる。&lt;/p></description></item><item><title>2023-07-02</title><link>https://blog.nfurudono.com/daily/2023-07-02/</link><pubDate>Sun, 02 Jul 2023 18:15:58 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-02/</guid><description>&lt;h2>
&lt;a href="#%e6%9c%ab%e5%b0%be%e4%bd%8d%e7%bd%ae" id="末尾位置" class="anchor" aria-hidden="true">末尾位置&lt;/a>
&lt;/h2>
&lt;p>末尾位置での関数呼び出しは、継続渡し形式ではcaleeに渡す継続をcallerが大きくしないで、
callerのcallerから渡されたものをそのまま渡す点で特徴的だ。レジスタマシンではcallerのスタック領域をcalleeが上書きして使うことに対応するのだろう。こういうcall命令はどのくらい実用されているのだろうか。&lt;/p></description></item><item><title>2023-07-01</title><link>https://blog.nfurudono.com/daily/2023-07-01/</link><pubDate>Sat, 01 Jul 2023 01:07:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-01/</guid><description>&lt;h2>
&lt;a href="#envsubst%e3%82%92%e7%9f%a5%e3%81%a3%e3%81%9f" id="envsubstを知った" class="anchor" aria-hidden="true">&lt;code>envsubst&lt;/code>を知った&lt;/a>
&lt;/h2>
&lt;p>&lt;code>envsubst&lt;/code>を使うと標準入力の環境変数の参照っぽいところに環境変数の値を埋め込んだテキストを吐ける。
readmeにコマンドのヘルプメッセージを載せたいときに便利。例: &lt;a href="https://github.com/naoyafurudono/tools/tree/main/cl">https://github.com/naoyafurudono/tools/tree/main/cl&lt;/a>&lt;/p></description></item><item><title>2023-06-30</title><link>https://blog.nfurudono.com/daily/2023-06-30/</link><pubDate>Fri, 30 Jun 2023 11:33:52 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-30/</guid><description>&lt;h2>
&lt;a href="#gitigrnore%e3%81%ae%e5%8f%8d%e6%98%a0" id="gitigrnoreの反映" class="anchor" aria-hidden="true">.gitigrnoreの反映&lt;/a>
&lt;/h2>
&lt;p>すでにgit管理されているファイルをgitignoreでマッチするようにしても、管理から外れない。外すためには以下のようにすると良い。&lt;/p></description></item><item><title>2023-06-29</title><link>https://blog.nfurudono.com/daily/2023-06-29/</link><pubDate>Thu, 29 Jun 2023 22:02:44 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-29/</guid><description>&lt;h2>
&lt;a href="#crateio%e3%83%87%e3%83%93%e3%83%a5%e3%83%bc" id="crateioデビュー" class="anchor" aria-hidden="true">crate.ioデビュー&lt;/a>
&lt;/h2>
&lt;p>crate.ioに初めてコードを登録した。&lt;code>cargo install&lt;/code> で入るから便利。ちょっとしたCLIツール書く体験がなかなか良い。
copilotが面倒なことやってくれる。&lt;/p></description></item><item><title>2023-06-24</title><link>https://blog.nfurudono.com/daily/2023-06-24/</link><pubDate>Sat, 24 Jun 2023 19:10:24 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-24/</guid><description>&lt;p>macのタイムゾーンの設定が狂っていて、今日の投稿がこれと前回の二つに分かれてしまった。&lt;/p>
&lt;p>今日はmacの設定と、以降に伴って壊れたちょっとしたCLIツールの修正した。昔Rustで雑に書いたもので、エラー処理が辛そうだったので少し勉強して改善した。
anyhowを使ってみたい気持ちが湧いたけど、まずは基本的なところからということでトレイトオブジェクトを使うことにした。&lt;code>type Result&amp;lt;T&amp;gt; = std::Result&amp;lt;T, dyn Error&amp;gt;&lt;/code>みたいな感じにすることで、いろんなエラーを孕んだresultに&lt;code>?&lt;/code>を使うことができて幸せ。&lt;/p></description></item><item><title>2023-06-23</title><link>https://blog.nfurudono.com/daily/2023-06-23/</link><pubDate>Fri, 23 Jun 2023 20:17:59 -0700</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-23/</guid><description>&lt;h2>
&lt;a href="#%e7%92%b0%e5%a2%83%e6%a7%8b%e7%af%89" id="環境構築" class="anchor" aria-hidden="true">環境構築&lt;/a>
&lt;/h2>
&lt;p>macを買って環境構築をしているのでメモしていく。&lt;/p>
&lt;ul>
&lt;li>capslock -&amp;gt; eisu toggle
&lt;ul>
&lt;li>システム環境設定 &amp;gt; キーボード &amp;gt; テキスト入力 &amp;gt; 入力ソース &amp;gt; Caps LockキーでABC入力モードに切り替える&lt;/li>
&lt;li>最近のmacは組み込みの設定で変更できるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1Password
&lt;ul>
&lt;li>&lt;a href="https://support.1password.com/secret-key/">最新のドキュメント&lt;/a>を参考にしてsecret keyを探し出す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CLIツール: 以下の順で入れると良い。気が向いたらインストールスクリプトを書こう
&lt;ul>
&lt;li>brew&lt;/li>
&lt;li>fish&lt;/li>
&lt;li>nvim&lt;/li>
&lt;li>.config&lt;/li>
&lt;li>その他&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>gitでsshを使うための設定: この投稿のおまけを参考に
&lt;ul>
&lt;li>鍵を生成&lt;/li>
&lt;li>githubに公開鍵を登録&lt;/li>
&lt;li>.ssh/configを書く&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>
&lt;a href="#%e3%81%8a%e3%81%be%e3%81%91" id="おまけ" class="anchor" aria-hidden="true">おまけ&lt;/a>
&lt;/h3>
&lt;h4>
&lt;a href="#ssh-keygen%e3%82%92%e4%be%bf%e5%88%a9%e3%81%ab" id="ssh-keygenを便利に" class="anchor" aria-hidden="true">ssh-keygenを便利に&lt;/a>
&lt;/h4>
&lt;p>個人メモ：&lt;a href="https://github.com/naoyafurudono/dotfiles/blob/main/fish/functions/_ssh-keygen.fish">dotiflilesに書いてある&lt;/a>のでコピペは不要。&lt;/p></description></item><item><title>2023-06-10</title><link>https://blog.nfurudono.com/daily/2023-06-10/</link><pubDate>Sat, 10 Jun 2023 14:04:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-10/</guid><description>&lt;h2>
&lt;a href="#%e3%81%93%e3%81%ae%e3%81%82%e3%81%84%e3%81%a0%e9%87%8e%e5%b4%8e%e3%81%be%e3%81%a9%e3%81%ae%e3%82%bf%e3%82%a4%e3%82%bf%e3%83%b3%e3%82%92%e8%aa%ad%e3%82%93%e3%81%a0" id="このあいだ野崎まどのタイタンを読んだ" class="anchor" aria-hidden="true">このあいだ野崎まどのタイタンを読んだ。&lt;/a>
&lt;/h2>
&lt;p>共感できるところが多かったし、なるほどなと思うところもあった。なにより読んでて楽しかったので読んでよかった。&lt;/p></description></item><item><title>2023-05-13</title><link>https://blog.nfurudono.com/daily/2023-05-13/</link><pubDate>Sat, 13 May 2023 20:38:25 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-05-13/</guid><description>&lt;h2>
&lt;a href="#%e4%bb%8a%e6%97%a5%e3%81%afrust%e3%82%92%e5%b0%91%e3%81%97%e5%8b%89%e5%bc%b7%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b" id="今日はrustを少し勉強している" class="anchor" aria-hidden="true">今日はRustを少し勉強している&lt;/a>
&lt;/h2>
&lt;p>もともと&lt;code>bash&lt;/code>で書いていたスクリプトを拡張したくなって、普段ならPythonで書くところを今日は新しいことをしてみようということでRustをつかってみることにした。&lt;/p></description></item><item><title>2023-04-16</title><link>https://blog.nfurudono.com/daily/2023-04-16/</link><pubDate>Sun, 16 Apr 2023 11:55:02 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-16/</guid><description>&lt;h2>
&lt;a href="#chatgpt%e3%81%a8%e3%81%ae%e6%88%af%e3%82%8c" id="chatgptとの戯れ" class="anchor" aria-hidden="true">ChatGPTとの戯れ&lt;/a>
&lt;/h2>
&lt;p>午前中はChatGPTとかであそんでいた。ブログを書いていたおかげで、AIに食わせる自分の書いた文書に困らないのが嬉しい。&lt;/p></description></item><item><title>2023-04-10</title><link>https://blog.nfurudono.com/daily/2023-04-10/</link><pubDate>Mon, 10 Apr 2023 11:59:19 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-10/</guid><description>&lt;p>この頃「詳解システム・パフォーマンス」を読んでいる。チューニングをする機会はないのでツールの説明は読み飛ばしているが、それに入る前の基礎的な概念を勉強している。学部の授業でやった理論的な基礎から復習して、もう少し具体的な実装とか最近のアーキテクチャのこととかまで勉強できている気がする。&lt;/p></description></item><item><title>2023-04-06</title><link>https://blog.nfurudono.com/daily/2023-04-06/</link><pubDate>Thu, 06 Apr 2023 20:59:33 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-06/</guid><description>&lt;h2>
&lt;a href="#suica%e3%81%ae%e5%87%a6%e7%90%86%e6%96%b9%e5%bc%8f%e3%81%8c%e5%a4%89%e3%82%8f%e3%82%8b%e3%82%89%e3%81%97%e3%81%84" id="suicaの処理方式が変わるらしい" class="anchor" aria-hidden="true">Suicaの処理方式が変わるらしい。&lt;/a>
&lt;/h2>
&lt;p>今まではレイテンシを減らすために改札をくぐった際の処理をローカルで行い、その後まったり同期する、みたいな方式をとっているという記事をみた記憶がある。&lt;/p></description></item><item><title>2023-04-02</title><link>https://blog.nfurudono.com/daily/2023-04-02/</link><pubDate>Sun, 02 Apr 2023 15:56:40 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-02/</guid><description>&lt;!--
仕事でどんな技術に振っていこうか考えている。
自分で制御しきれるものではないだろうけど、
方針を決めるのに主体性を持たないとつまらないだろう。
やはりプログラミング言語は好きでこれからも勉強していきたい。
-->
&lt;p>CPythonの開発者向けドキュメントがとてもよい。今は&lt;a href="https://devguide.python.org/internals/compiler/">コンパイラの構成に関する部分&lt;/a>を読んでいる。抽象構文木の扱いやメモリ管理の方針など、コンパイラ開発の方針を説明している。ドラゴンブックとかからは得られない、開発手法の知識を得られて幸せ。&lt;/p></description></item><item><title>2023-03-31</title><link>https://blog.nfurudono.com/daily/2023-03-31/</link><pubDate>Fri, 31 Mar 2023 16:01:16 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-03-31/</guid><description>&lt;p>東大の田浦先生が公開されている&lt;a href="https://doss.eidos.ic.i.u-tokyo.ac.jp/">大規模ソフトウェアを探る&lt;/a>がとてもよかった。
GDBを使って大きなソフトウェアの振る舞いを理解する方法を学べる。
2年ほど前に、こういう資料が喉から手が出るほどほしいと感じていた記憶がある。&lt;/p></description></item><item><title>2023-03-19</title><link>https://blog.nfurudono.com/daily/2023-03-19/</link><pubDate>Sun, 19 Mar 2023 10:46:59 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-03-19/</guid><description>&lt;p>最近AIが流行っていて、精度がすごいと話題で、生活が多かれ少なかれ変わっていくのだろうなという感じがする。ああいう機械学習ベースのAIは学習で直感を鍛えて、それに基づく出力をするものだと僕は解釈している。人間が頭を使うときには直感を論理とか議論で検証して、主張の穴を見つけて改善するサイクルを回すはずだ。今の機械学習っぽいAIは直感で得た主張を論理で解釈しないだろう（&lt;a href="https://www.nec.com/en/global/rd/technologies/201807/index.html">NECがそういうことを考えていそう&lt;/a>。それができればAIはもっとつよくなるはずだし、そういうAIを見てみたい。&lt;/p></description></item><item><title>使い勝手の良いデスクトップ向けウィンドウマネージャが欲しい</title><link>https://blog.nfurudono.com/posts/window-manager/</link><pubDate>Thu, 16 Mar 2023 11:50:52 +0900</pubDate><guid>https://blog.nfurudono.com/posts/window-manager/</guid><description>&lt;p>使い勝手のよいウィンドウマネージャがWindowsとかMacに搭載されることはないだろう。使うアプリケーションやブラウザ、入力デバイスやその使い方によって使い勝手が大きく変わるだろうから。
OSが決め打ちで提供できるものでは無いんじゃないかと思う。なので自分でまじめに使い勝手の良いものを考える必要がある。&lt;/p></description></item><item><title>エフェクトハンドラの良さと実用性について</title><link>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</link><pubDate>Thu, 16 Mar 2023 10:57:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</guid><description>&lt;p>エフェクトハンドラで継続や代数的エフェクトを扱う必要性は一ミリもなくて、実用的にそれらが欲しくなることはないか、あるいは限られていてそこまで一般的な機能を提供する必要はないんじゃないかと感じている。&lt;/p></description></item><item><title>Google Cloudの認証を必要とするアプリケーション開発について</title><link>https://blog.nfurudono.com/posts/gcp-cred/</link><pubDate>Tue, 14 Mar 2023 19:19:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/gcp-cred/</guid><description>&lt;p>Google Cloudの認証・認可はきめ細かくちゃんとしている感じがして、扱うのが難しいと感じていた。少し調べたら&lt;a href="https://cloud.google.com/docs/authentication/client-libraries#adc">Application Default Credentials with client libraries&lt;/a>の説明を見つけて腹に落ちた。これを抑えた上で、&lt;a href="https://cloud.google.com/docs/authentication/provide-credentials-adc#how_to_provide_credentials_to_adc">それぞれの実行環境でどのようにcredentialをセットアップするか&lt;/a>を見ると、プロセスの権限が半分くらいわかる。ここまでで、サービスアカウントがどのようにプロセスに付与されるかを理解できるはずだ。&lt;/p></description></item><item><title>Linux (gnome) でよくやる設定</title><link>https://blog.nfurudono.com/posts/linux-keys/</link><pubDate>Tue, 28 Feb 2023 01:59:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/linux-keys/</guid><description>&lt;p>GNOMEというかLinuxというかでよくやる設定を列挙する。キーボード系が多いと思う。&lt;/p>
&lt;h3>
&lt;a href="#gnome-terminal-%e3%81%a7ctrl-shift-tab%e3%82%92%e6%9c%89%e5%8a%b9%e3%81%ab%e3%81%99%e3%82%8b" id="gnome-terminal-でctrl-shift-tabを有効にする" class="anchor" aria-hidden="true">gnome-terminal で&lt;code>ctrl-(shift-)?tab&lt;/code>を有効にする&lt;/a>
&lt;/h3>
&lt;p>以下を実行&lt;/p></description></item><item><title>2023-02-27</title><link>https://blog.nfurudono.com/daily/2023-02-27/</link><pubDate>Mon, 27 Feb 2023 18:56:50 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-02-27/</guid><description>&lt;p>Gentooが入った。基本的に待っているだけではあるのだけど、それがなかなか大変。パッケージを一瞬でインストールできる幸せに気がついた。割とすぐにUbuntuに戻るかもしれない。今はnodejsとtexliveをコンパイルしている。未だかつてなくCPUが仕事をしている。かわいそうに。とはいえportageに触れるのはなかなか楽しい。&lt;/p></description></item><item><title>2023-02-26</title><link>https://blog.nfurudono.com/daily/2023-02-26/</link><pubDate>Sun, 26 Feb 2023 03:39:26 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-02-26/</guid><description>&lt;p>Golangをすごく久しぶりに書いた結果、構造体の要素がコピーされることを忘れておりデバッグに時間を溶かした（コピーした構造体のフィールドを書き換えて、コピー元に変化が起きると思い込んでいた）。最近はPythonやTSか、関数型言語ばかり書いていて、Cっぽい構造体の扱いをしていなかったので忘れてしまっていたのだろう。忘れていたけど、CやGoのように構造体の要素をコピーする意味論は好き。直感的というか、明示的にポインタを表現することが好きなのだろうか。&lt;/p></description></item><item><title>PCの構成メモ</title><link>https://blog.nfurudono.com/posts/my-pc/</link><pubDate>Thu, 23 Feb 2023 14:22:44 +0900</pubDate><guid>https://blog.nfurudono.com/posts/my-pc/</guid><description>&lt;p>PCを自作して使っているのだけど、どんなパーツを使ったか忘れて後でなにか買い足すときに互換性があるかわからなくてこまる。今回調査してメモしておく。&lt;/p></description></item></channel></rss>