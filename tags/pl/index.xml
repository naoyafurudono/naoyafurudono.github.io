<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PL on ツイートするには長すぎる</title><link>https://blog.nfurudono.com/tags/pl/</link><description>Recent content in PL on ツイートするには長すぎる</description><generator>Hugo</generator><language>ja</language><copyright>&amp;copy;{currentYear} Naoya Furudono</copyright><lastBuildDate>Wed, 27 Nov 2024 19:20:33 +0900</lastBuildDate><atom:link href="https://blog.nfurudono.com/tags/pl/index.xml" rel="self" type="application/rss+xml"/><item><title>2024-11-27</title><link>https://blog.nfurudono.com/daily/2024-11-27/</link><pubDate>Wed, 27 Nov 2024 19:19:42 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-11-27/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://incepter.github.io/how-react-works/">https://incepter.github.io/how-react-works/&lt;/a> これ面白そうなので読む。定期的にくるReactの仕組みを深掘りしたくなる時期。&lt;/li>
&lt;/ul></description></item><item><title>2024-10-28</title><link>https://blog.nfurudono.com/daily/2024-10-28/</link><pubDate>Mon, 28 Oct 2024 23:14:39 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-10-28/</guid><description>&lt;p>昔は親の顔より見た &lt;code>lambda&lt;/code> をこの頃は全然見ていないしタイプしてもいない。寂しいねえ。クロージャをぼちぼち使うのだけど、評価規則や型規則とにらめっこする時間は完全に失ってしまった。&lt;/p></description></item><item><title>Goのanalysisとtypesに入門する</title><link>https://blog.nfurudono.com/posts/go-static-analysis/</link><pubDate>Sat, 31 Aug 2024 15:02:41 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-static-analysis/</guid><description>&lt;h2>
&lt;a href="#%e6%a6%82%e8%a6%81" id="概要" class="anchor" aria-hidden="true">概要&lt;/a>
&lt;/h2>
&lt;p>Goで静的解析してリンターを実装したい。具体的には、あるT1インターフェース型の変数がスコープにあるときは、T1よりゆるい任意の型の使用を禁止する、みたいな制約を入れたい。その辺に転がっている記事ではASTを覗いてみたり、SSAを覗いてみたりするようだけど、ASTとその型をまともに扱っていつつ、いい感じに静的解析ツールとして仕上げる記事を見つけられなかった。&lt;/p></description></item><item><title>AHK入門</title><link>https://blog.nfurudono.com/posts/ahk/</link><pubDate>Sun, 28 Jul 2024 01:41:34 +0900</pubDate><guid>https://blog.nfurudono.com/posts/ahk/</guid><description>&lt;p>Windowsマシンでキーボード操作が不便なので導入する。悪態をつきながらも使っている人を知っているので内容を理解していないが期待している。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" id="インストール" class="anchor" aria-hidden="true">インストール&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.autohotkey.com/">https://www.autohotkey.com/&lt;/a> 公式ページからバイナリを落とせる。インストールするとwelcome画面が開いたのだが、そこに「コンパイルする」ボタンがあって、ちょっと不安になる。僕はプログラムをボタンを押してコンパイルしないといけない？&lt;/p></description></item><item><title>RubyKaigi2024参加メモ</title><link>https://blog.nfurudono.com/posts/rubykaigi2024/</link><pubDate>Sat, 18 May 2024 18:51:00 +0900</pubDate><guid>https://blog.nfurudono.com/posts/rubykaigi2024/</guid><description>&lt;p>RubyKaigi2024に参加したので、思ったことをメモしておきます。&lt;/p>
&lt;p>参加したセッションはこちら: &lt;a href="https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3">https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3&lt;/a>&lt;/p>
&lt;h2>
&lt;a href="#shopify%e3%81%8c%e3%81%99%e3%81%94%e3%81%84" id="shopifyがすごい" class="anchor" aria-hidden="true">shopifyがすごい&lt;/a>
&lt;/h2>
&lt;p>今回のセッションをいくつか聞いてShopifyのやり方に憧れるようになった。エンジニアリングをしていく上での姿勢として、課題に対して上流から対処しよう、みたいな箴言があってそれが心に残っている。
ShopifyのRuby周りのチームはまさにそれを地で行っていると今回のセッションを聞いて感じたそういうチームに所属して（作って？）良いエンジニアリングをしていきたいと思っていたのだが、これまでは具体的なイメージいを持っていなかった。&lt;/p></description></item><item><title>ElmアーキテクチャをReactで実現する話</title><link>https://blog.nfurudono.com/posts/elm-architecture/</link><pubDate>Thu, 18 Apr 2024 00:58:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/elm-architecture/</guid><description>&lt;h2>
&lt;a href="#elm%e3%82%a2%e3%83%bc%e3%82%ad%e3%83%86%e3%82%af%e3%83%81%e3%83%a3" id="elmアーキテクチャ" class="anchor" aria-hidden="true">Elmアーキテクチャ&lt;/a>
&lt;/h2>
&lt;p>リアクティブプログラミングの勉強をしていた頃にElm言語を知って好きになった（全然コード書いてないけど）。特徴はElmアーキテクチャにあると思っている。
Webアプリケーションの大体のフロントエンドアプリケーションはこう言うアーキテクチャで表現できるはず、みたいなことを言っていて、そのアーキテクチャが簡単なので気に入ったのだろう。&lt;/p></description></item><item><title>2024-02-17</title><link>https://blog.nfurudono.com/daily/2024-02-17/</link><pubDate>Sat, 17 Feb 2024 17:55:29 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-02-17/</guid><description>&lt;p>glangに&lt;a href="https://github.com/golang/go/issues/61405">generaterを入れようというプロポーザル&lt;/a>があって、試験的に実装されているみたい。いくつかのパターンがあるけど、&lt;a href="https://go.dev/play/p/93W3jTQjBk0?v=gotip">だいたいこんな感じで使える (The Go Playground)&lt;/a>。&lt;/p>
&lt;p>ジェネレータとして使われる関数は定義の段階では普通の関数と区別がつかないような構文定義をされている。コンパイラやランタイムの実装が気になるし、静的解析ツールが大変なことにならないかが心配。&lt;/p></description></item><item><title>2024-02-13</title><link>https://blog.nfurudono.com/daily/2024-02-13/</link><pubDate>Tue, 13 Feb 2024 18:16:15 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2024-02-13/</guid><description>&lt;p>今日1on1で教えてもらった。ロールモデルとして追っていく。&lt;a href="https://scrapbox.io/kawasima/%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB">https://scrapbox.io/kawasima/%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB&lt;/a>&lt;/p></description></item><item><title>2023-12-26</title><link>https://blog.nfurudono.com/daily/2023-12-26/</link><pubDate>Tue, 26 Dec 2023 20:15:27 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-12-26/</guid><description>&lt;h2>
&lt;a href="#%e3%83%a1%e3%83%a2" id="メモ" class="anchor" aria-hidden="true">メモ&lt;/a>
&lt;/h2>
&lt;p>ついったで同僚が &lt;code>panicIndex&lt;/code> と言っていて、なんだそれと思ったので調べた。golangの文脈だったので想像はある程度ついて、golangのランタイムの一部として？実装されている関数でインデックスに関するパニックを投げる関数だった。&lt;/p></description></item><item><title>推し言語機能 Racket編</title><link>https://blog.nfurudono.com/posts/fav-racket-features/</link><pubDate>Tue, 19 Dec 2023 22:33:05 +0900</pubDate><guid>https://blog.nfurudono.com/posts/fav-racket-features/</guid><description>&lt;p>この記事は&lt;a href="https://adventar.org/calendars/8634">GMOペパボエンジニア Advent Calendar 2023 🎅会場&lt;/a>の19日の記事です！&lt;/p>
&lt;p>昨日はyagijinさんのReactやってる人向けのSwiftUI入門でした。
Swiftに興味があるReact信者の僕のために書いてくれたのかと錯覚しました。これを期にSwift UI入門しようと思います。
Swift UIは双方向バインディングを採用しているとのことなので、Vueとの類似もありそうですね。&lt;/p></description></item><item><title>2023-09-12</title><link>https://blog.nfurudono.com/daily/2023-09-12/</link><pubDate>Tue, 12 Sep 2023 01:20:35 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-09-12/</guid><description>&lt;h2>
&lt;a href="#rust%e9%9b%a3%e3%81%97%e3%81%84" id="rust難しい" class="anchor" aria-hidden="true">rust難しい&lt;/a>
&lt;/h2>
&lt;p>以下のあたりを完全に理解したらだいぶ楽になる気がする。&lt;/p>
&lt;ul>
&lt;li>エラー処理&lt;/li>
&lt;li>イテレータ&lt;/li>
&lt;li>借用とcopy&lt;/li>
&lt;/ul>
&lt;p>エラー処理やイテレータの周りはrustに限らずどの言語でも乗り越える一つの壁な気がする。例えばpythonに入門したときは、フランクにExceptionを継承したクラスを定義して、それを投げたりキャッチしたりすることを覚えたり、ジェネレータやリスト内包表記を覚えたりしたときに楽になった。そのほかはモジュールとかパッケージ周りの仕組みが新しく言語を学ぶときの障壁だと思っている。&lt;/p></description></item><item><title>契約と型検査</title><link>https://blog.nfurudono.com/posts/contract-programming/</link><pubDate>Thu, 31 Aug 2023 21:49:38 +0900</pubDate><guid>https://blog.nfurudono.com/posts/contract-programming/</guid><description>&lt;p>プログラミングの型検査・契約・テストについて書きます。お酒を飲みながら書きました。注意は払ったつもりですが、変なところがあるかもしれません。&lt;/p>
&lt;ul>
&lt;li>契約とは何か
&lt;ul>
&lt;li>例を含める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>どんな嬉しさがあるか&lt;/li>
&lt;li>型検査との兼ね合い&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e5%a5%91%e7%b4%84%e3%81%a8%e3%81%af%e4%bd%95%e3%81%8b" id="契約とは何か" class="anchor" aria-hidden="true">契約とは何か&lt;/a>
&lt;/h2>
&lt;p>契約 (contract) とはプラグラムの関数の入出力に関する規約のことです。例えば整数の割り算をする &lt;code>div&lt;/code> 関数は、二つの整数を受け取って商を返す関数だとしましょう。このとき、入力の二つの値は&lt;/p></description></item><item><title>2023-07-22</title><link>https://blog.nfurudono.com/daily/2023-07-22/</link><pubDate>Sat, 22 Jul 2023 11:56:59 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-22/</guid><description>&lt;h2>
&lt;a href="#%e3%81%b5%e3%81%ab%e3%82%83%e3%81%a3%e3%81%a8%e3%81%97%e3%81%a6%e3%82%8b" id="ふにゃっとしてる" class="anchor" aria-hidden="true">ふにゃっとしてる&lt;/a>
&lt;/h2>
&lt;p>コンパイラの実装で、次はポインタ算術をやる。演算子がオーバーローディングされているので型検査が必要。今は環境とかのデータ構造を設計する気力がなくて、パソコンを前にふにゃっとしている。お昼ご飯食べたら考える。&lt;/p></description></item><item><title>2023-07-21</title><link>https://blog.nfurudono.com/daily/2023-07-21/</link><pubDate>Fri, 21 Jul 2023 23:18:37 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-21/</guid><description>&lt;h2>
&lt;a href="#%e8%87%aa%e4%bd%9cc%e3%82%b3%e3%83%b3%e3%83%91%e3%82%a4%e3%83%a9%e3%81%ae%e9%80%b2%e6%8d%97" id="自作cコンパイラの進捗" class="anchor" aria-hidden="true">自作Cコンパイラの進捗&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/comp">https://github.com/naoyafurudono/comp&lt;/a>&lt;/p>
&lt;p>早いもので作り始めてから2週間たったみたい。もっとサクサク進むと思っていたのだけど、しばらく楽しめそう。&lt;/p></description></item><item><title>2023-07-19</title><link>https://blog.nfurudono.com/daily/2023-07-19/</link><pubDate>Wed, 19 Jul 2023 23:34:45 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-19/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io">実装しているCコンパイラ&lt;/a>
で関数定義をできるようになった🎉。今までも既存のコンパイラで作ったオブジェクトファイルとリンクすれば呼び出すことはできていたが、自分で定義した関数がある程度ちゃんと呼べるようになった。&lt;/p></description></item><item><title>2023-07-17</title><link>https://blog.nfurudono.com/daily/2023-07-17/</link><pubDate>Mon, 17 Jul 2023 18:47:03 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-17/</guid><description>&lt;p>Cコンパイラをarm macで実装しているのだけど、&lt;code>a=b=0; return b;&amp;quot;&lt;/code>みたいなコードがセグメント違反で落ちる。
lldbで調べてみると、main関数は正しい値を&lt;code>w0&lt;/code>にセットして&lt;code>ret&lt;/code>できていそうなんだけどその後の動的リンクされたコードでエラーが発生しているみたい。設定する値を変えるとエラーにならずに実行が終了する。謎である。&lt;/p></description></item><item><title>arm64のメモ</title><link>https://blog.nfurudono.com/posts/arm64/</link><pubDate>Sat, 15 Jul 2023 16:17:21 +0900</pubDate><guid>https://blog.nfurudono.com/posts/arm64/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/comp">Cコンパイラを実装する&lt;/a>ためにarm64のことを調べている。この記事はそのメモ。&lt;/p>
&lt;h2>
&lt;a href="#%e5%85%ac%e5%bc%8f%e3%83%89%e3%82%ad%e3%83%a5%e3%83%a1%e3%83%b3%e3%83%88" id="公式ドキュメント" class="anchor" aria-hidden="true">公式ドキュメント&lt;/a>
&lt;/h2>
&lt;p>よくあるソフトウェアのライブラリについているドキュメントとは毛色が違う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.arm.com/documentation/den0024/a/An-Introduction-to-the-ARMv8-Instruction-Sets">Armv8-A Instruction Set Architecture&lt;/a>が優しい
&lt;ul>
&lt;li>&lt;a href="https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/Learn%20the%20Architecture/Armv8-A%20Instruction%20Set%20Architecture.pdf?revision=ebf53406-04fd-4c67-a485-1b329febfb3e">PDF版もある&lt;/a>。空白多めのシングルカラム39ページなのでサクッと読める。最初に読んでおくと幸せになれたかも。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/ARM-software/abi-aa/releases/download/2023Q1/aapcs64.pdf">Procedure Call Standard for the Arm® 64-bit Architecture (AArch64) (pdf)&lt;/a>がCコンパイラを実装するときに気になる細かいことをコンパクトにまとめてそうな印象。&lt;/li>
&lt;li>上のドキュメントを含む&lt;a href="https://github.com/ARM-software/abi-aa/releases">公式のリンク集がある&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e3%83%84%e3%83%bc%e3%83%ab" id="ツール" class="anchor" aria-hidden="true">ツール&lt;/a>
&lt;/h2>
&lt;p>Arm macを使っている人の話です。&lt;/p></description></item><item><title>2023-07-08</title><link>https://blog.nfurudono.com/daily/2023-07-08/</link><pubDate>Sat, 08 Jul 2023 12:39:28 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-08/</guid><description>&lt;h2>
&lt;a href="#%e3%83%8e%e3%83%bc%e3%83%88%e3%83%91%e3%82%bd%e3%82%b3%e3%83%b3%e3%81%ae%e6%81%a9%e6%81%b5" id="ノートパソコンの恩恵" class="anchor" aria-hidden="true">ノートパソコンの恩恵&lt;/a>
&lt;/h2>
&lt;p>椅子に座るほどの元気がなくてもパソコン座れるので楽しい。気軽にコーディングできる。&lt;/p></description></item><item><title>2023-07-05</title><link>https://blog.nfurudono.com/daily/2023-07-05/</link><pubDate>Wed, 05 Jul 2023 22:19:47 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-07-05/</guid><description>&lt;h2>
&lt;a href="#%e8%ab%96%e7%90%86%e3%81%a8%e5%93%b2%e5%ad%a6%e3%81%a8%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e8%a8%80%e8%aa%9e" id="論理と哲学とプログラミング言語" class="anchor" aria-hidden="true">論理と哲学とプログラミング言語&lt;/a>
&lt;/h2>
&lt;p>プロトタイプベースのオブジェクト指向言語について、哲学の方面から議論したエッセイを読んだ。クラスベースなのは古典的なアリストテレス的な分類の考え方に基づくもので、プロトタイプベースなものはヴィトゲンシュタインっぽい考え方に基づくとのこと。&lt;/p></description></item><item><title>2023-06-29</title><link>https://blog.nfurudono.com/daily/2023-06-29/</link><pubDate>Thu, 29 Jun 2023 22:02:44 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-29/</guid><description>&lt;h2>
&lt;a href="#crateio%e3%83%87%e3%83%93%e3%83%a5%e3%83%bc" id="crateioデビュー" class="anchor" aria-hidden="true">crate.ioデビュー&lt;/a>
&lt;/h2>
&lt;p>crate.ioに初めてコードを登録した。&lt;code>cargo install&lt;/code> で入るから便利。ちょっとしたCLIツール書く体験がなかなか良い。
copilotが面倒なことやってくれる。&lt;/p></description></item><item><title>2023-06-24</title><link>https://blog.nfurudono.com/daily/2023-06-24/</link><pubDate>Sat, 24 Jun 2023 19:10:24 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-06-24/</guid><description>&lt;p>macのタイムゾーンの設定が狂っていて、今日の投稿がこれと前回の二つに分かれてしまった。&lt;/p>
&lt;p>今日はmacの設定と、以降に伴って壊れたちょっとしたCLIツールの修正した。昔Rustで雑に書いたもので、エラー処理が辛そうだったので少し勉強して改善した。
anyhowを使ってみたい気持ちが湧いたけど、まずは基本的なところからということでトレイトオブジェクトを使うことにした。&lt;code>type Result&amp;lt;T&amp;gt; = std::Result&amp;lt;T, dyn Error&amp;gt;&lt;/code>みたいな感じにすることで、いろんなエラーを孕んだresultに&lt;code>?&lt;/code>を使うことができて幸せ。&lt;/p></description></item><item><title>2023-05-13</title><link>https://blog.nfurudono.com/daily/2023-05-13/</link><pubDate>Sat, 13 May 2023 20:38:25 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-05-13/</guid><description>&lt;h2>
&lt;a href="#%e4%bb%8a%e6%97%a5%e3%81%afrust%e3%82%92%e5%b0%91%e3%81%97%e5%8b%89%e5%bc%b7%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b" id="今日はrustを少し勉強している" class="anchor" aria-hidden="true">今日はRustを少し勉強している&lt;/a>
&lt;/h2>
&lt;p>もともと&lt;code>bash&lt;/code>で書いていたスクリプトを拡張したくなって、普段ならPythonで書くところを今日は新しいことをしてみようということでRustをつかってみることにした。&lt;/p></description></item><item><title>2023-05-02</title><link>https://blog.nfurudono.com/daily/2023-05-02/</link><pubDate>Tue, 02 May 2023 08:44:41 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-05-02/</guid><description>&lt;h2>
&lt;a href="#%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%83%91%e3%83%a9%e3%83%80%e3%82%a4%e3%83%a0%e3%82%92%e4%b8%a6%e3%81%b9%e3%81%a6%e8%a6%b3%e5%af%9f%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b" id="プログラミングパラダイムを並べて観察している" class="anchor" aria-hidden="true">プログラミングパラダイムを並べて観察している&lt;/a>
&lt;/h2>
&lt;p>DDD周りを最近漁っている。原著はオブジェクト指向で説明されているけど、関数型で説明している本を直近で読んでいる。僕はプログラミングを関数型から始めた人間だし、集合論や関数解析が好きだったからかオブジェクト指向があまりしっくり来ない。インターフェースとかクラスでモデルする気持ちはなんとなく分かる気がするし、拡張性とか再利用性を考えたときに既存のコードをできるだけ壊さずに機能追加できるのは強いと思う。なんだけど、そういう変更ありきで書かれたコードが素直に対象を表現しているとは思えなくて辛さを感じてしまう。それに対して型とか関数型のあれこれを考えるときは、まだ分かる感じがして救いがある。モナドとかが普通のプログラミングに入ってくるとやはりこんがらがってくるのだけど。きっとパラダイムの問題ではなくて、抽象化になれてないとか親しんでないみたいなところが問題なのだろう。&lt;/p></description></item><item><title>2023-04-28</title><link>https://blog.nfurudono.com/daily/2023-04-28/</link><pubDate>Fri, 28 Apr 2023 00:34:21 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-28/</guid><description>&lt;h2>
&lt;a href="#%e6%84%8f%e5%91%b3%e8%ab%96%e3%81%ae%e8%a9%b1" id="意味論の話" class="anchor" aria-hidden="true">意味論の話&lt;/a>
&lt;/h2>
&lt;p>今日は意味論の直感が少し生えたので機嫌がいい。寝て起きたらもう少しまじめに考えよう。&lt;/p>
&lt;h3>
&lt;a href="#%e8%bf%bd%e8%a8%98" id="追記" class="anchor" aria-hidden="true">追記&lt;/a>
&lt;/h3>
&lt;p>完全に忘れていた。一回捨てた継続渡しスタイルで考えるのがやはり良いだろうという直感のもとでの考えだった。細かいことは忘れてしまったが、少し考えれば再現できる程度だったと思う。継続フレームを生むときと、式を評価するタイミングを明示的にわけるとか、反対にそういうくくりで共通化することでこれまで見えていなかったアスペクトが表面化していい感じになりそう、みたいな直感だった気がする。&lt;/p></description></item><item><title>2023-04-02</title><link>https://blog.nfurudono.com/daily/2023-04-02/</link><pubDate>Sun, 02 Apr 2023 15:56:40 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-04-02/</guid><description>&lt;!--
仕事でどんな技術に振っていこうか考えている。
自分で制御しきれるものではないだろうけど、
方針を決めるのに主体性を持たないとつまらないだろう。
やはりプログラミング言語は好きでこれからも勉強していきたい。
-->
&lt;p>CPythonの開発者向けドキュメントがとてもよい。今は&lt;a href="https://devguide.python.org/internals/compiler/">コンパイラの構成に関する部分&lt;/a>を読んでいる。抽象構文木の扱いやメモリ管理の方針など、コンパイラ開発の方針を説明している。ドラゴンブックとかからは得られない、開発手法の知識を得られて幸せ。&lt;/p></description></item><item><title>2023-03-19</title><link>https://blog.nfurudono.com/daily/2023-03-19/</link><pubDate>Sun, 19 Mar 2023 10:46:59 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-03-19/</guid><description>&lt;p>最近AIが流行っていて、精度がすごいと話題で、生活が多かれ少なかれ変わっていくのだろうなという感じがする。ああいう機械学習ベースのAIは学習で直感を鍛えて、それに基づく出力をするものだと僕は解釈している。人間が頭を使うときには直感を論理とか議論で検証して、主張の穴を見つけて改善するサイクルを回すはずだ。今の機械学習っぽいAIは直感で得た主張を論理で解釈しないだろう（&lt;a href="https://www.nec.com/en/global/rd/technologies/201807/index.html">NECがそういうことを考えていそう&lt;/a>。それができればAIはもっとつよくなるはずだし、そういうAIを見てみたい。&lt;/p></description></item><item><title>エフェクトハンドラの良さと実用性について</title><link>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</link><pubDate>Thu, 16 Mar 2023 10:57:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</guid><description>&lt;p>エフェクトハンドラで継続や代数的エフェクトを扱う必要性は一ミリもなくて、実用的にそれらが欲しくなることはないか、あるいは限られていてそこまで一般的な機能を提供する必要はないんじゃないかと感じている。&lt;/p></description></item><item><title>2023-02-26</title><link>https://blog.nfurudono.com/daily/2023-02-26/</link><pubDate>Sun, 26 Feb 2023 03:39:26 +0900</pubDate><guid>https://blog.nfurudono.com/daily/2023-02-26/</guid><description>&lt;p>Golangをすごく久しぶりに書いた結果、構造体の要素がコピーされることを忘れておりデバッグに時間を溶かした（コピーした構造体のフィールドを書き換えて、コピー元に変化が起きると思い込んでいた）。最近はPythonやTSか、関数型言語ばかり書いていて、Cっぽい構造体の扱いをしていなかったので忘れてしまっていたのだろう。忘れていたけど、CやGoのように構造体の要素をコピーする意味論は好き。直感的というか、明示的にポインタを表現することが好きなのだろうか。&lt;/p></description></item></channel></rss>