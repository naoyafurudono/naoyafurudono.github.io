---
import Layout from "@/layouts/Layout.astro";
import { articleDirectoryPaths, postUrl, siteTitle, withSiteTitle } from "@/lib/config";
import { type ArticleID, findArticle, listArticles } from "@/lib/gateway";
import { newRoot, type RenderResult, render, renderMdAst } from "@/lib/render";

export async function getStaticPaths() {
  const articles = await listArticles(articleDirectoryPaths);
  return articles.map((a) => ({ params: { id: a.id } }));
}

const { id } = Astro.params;

const article = await findArticle({
  articleId: id as ArticleID,
  directoryPaths: articleDirectoryPaths,
});

if (!article) {
  return Astro.redirect("/404");
}

const rendered: RenderResult = await render(article);
const toc = rendered.toc && (await renderMdAst(newRoot([rendered.toc])));
const { before, after } = article;

const description = rendered.desc;
const pageTitle = withSiteTitle(rendered.title);
---

<Layout title={pageTitle} description={description}>
  <Fragment slot="head">
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={postUrl(id)} />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:image" content={`${postUrl(id)}opengraph-image.png`} />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:creator" content="@furudono2" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={`${postUrl(id)}opengraph-image.png`} />
  </Fragment>

  <style>
    /* 記事ナビゲーションのスタイリング */
    .article-navigation {
      display: flex;
      justify-content: space-between;
      align-items: stretch;
      gap: 1rem;
      margin: 3rem 0 2rem 0;
      padding: 1.5rem;
      background-color: #f8f9fa;
      border-radius: 0.5rem;
      border: 1px solid #dee2e6;
    }

    .nav-item {
      flex: 1;
      display: flex;
      align-items: center;
    }

    .nav-prev {
      justify-content: flex-start;
    }

    .nav-next {
      justify-content: flex-end;
      text-align: right;
    }

    .nav-link {
      display: flex;
      flex-direction: column;
      text-decoration: none;
      padding: 1rem;
      border-radius: 0.375rem;
      background-color: white;
      border: 1px solid #dee2e6;
      transition: all 0.2s ease;
      max-width: 300px;
      min-height: 80px;
      position: relative;
      overflow: hidden;
    }

    .nav-link:hover {
      background-color: #007bff;
      color: white;
      border-color: #007bff;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    }

    .nav-label {
      font-size: 0.8rem;
      color: #6c757d;
      font-weight: 500;
      margin-bottom: 0.25rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .nav-link:hover .nav-label {
      color: rgba(255, 255, 255, 0.8);
    }

    .nav-title {
      font-size: 1rem;
      font-weight: 600;
      color: #212529;
      line-height: 1.3;
      word-break: break-word;
    }

    .nav-link:hover .nav-title {
      color: white;
    }

    .nav-disabled {
      color: #6c757d;
      font-style: italic;
      padding: 1rem;
      text-align: center;
      background-color: #f1f3f4;
      border-radius: 0.375rem;
      border: 1px solid #e9ecef;
    }

    /* レスポンシブ対応 */
    @media (max-width: 768px) {
      .article-navigation {
        flex-direction: column;
        gap: 0.5rem;
      }

      .nav-item {
        justify-content: center;
      }

      .nav-next {
        text-align: center;
      }

      .nav-link {
        max-width: none;
        width: 100%;
      }
    }
  </style>

  <article>
    <h1>{rendered.title}</h1>
    <time>{rendered.date}</time>
    {toc && <div set:html={toc} />}
    <div set:html={rendered.rawBody.toString()} />
  </article>
  <nav class="article-navigation">
    <div class="nav-item nav-prev">
      {
        before ? (
          <a href={`/posts/${before}`} class="nav-link nav-link-prev">
            <span class="nav-label">前の記事</span>
            <span class="nav-title">← {before}</span>
          </a>
        ) : (
          <span class="nav-disabled">この記事が最古です</span>
        )
      }
    </div>
    <div class="nav-item nav-next">
      {
        after ? (
          <a href={`/posts/${after}`} class="nav-link nav-link-next">
            <span class="nav-label">次の記事</span>
            <span class="nav-title">{after} →</span>
          </a>
        ) : (
          <span class="nav-disabled">この記事が最新です</span>
        )
      }
    </div>
  </nav>
</Layout>
