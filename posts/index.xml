<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ツイートするには長すぎる</title><link>https://blog.nfurudono.com/posts/</link><description>Recent content in Posts on ツイートするには長すぎる</description><generator>Hugo</generator><language>ja</language><copyright>&amp;copy;{currentYear} Naoya Furudono</copyright><lastBuildDate>Wed, 08 Jan 2025 00:36:53 +0900</lastBuildDate><atom:link href="https://blog.nfurudono.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>漏れなくスタックトレースをGoで取りたい！</title><link>https://blog.nfurudono.com/posts/go-errors-stacktrace/</link><pubDate>Wed, 08 Jan 2025 00:12:35 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-errors-stacktrace/</guid><description>&lt;p>&lt;a href="https://github.com/k1LoW/errors">k1LoW/errors&lt;/a> でスタックトレースをエラーにつけられるようになる。便利なのだがトレースをプログラマが明示的に指示しないといけない。設定をコードベースで一回やれば終わりではなく、エラーの発生源で書かないといけない点が気になっている。書くこと自体は許容しているが、漏れがないように人間が頑張るのは許容したくない。漏れをなくすための仕組みを主張する。&lt;/p></description></item><item><title>Goのanalysisとtypesに入門する</title><link>https://blog.nfurudono.com/posts/go-static-analysis/</link><pubDate>Sat, 31 Aug 2024 15:02:41 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-static-analysis/</guid><description>&lt;h2>
&lt;a href="#%e6%a6%82%e8%a6%81" id="概要" class="anchor" aria-hidden="true">概要&lt;/a>
&lt;/h2>
&lt;p>Goで静的解析してリンターを実装したい。具体的には、あるT1インターフェース型の変数がスコープにあるときは、T1よりゆるい任意の型の使用を禁止する、みたいな制約を入れたい。その辺に転がっている記事ではASTを覗いてみたり、SSAを覗いてみたりするようだけど、ASTとその型をまともに扱っていつつ、いい感じに静的解析ツールとして仕上げる記事を見つけられなかった。&lt;/p></description></item><item><title>Neovimにlazyを入れてプラグイン管理することにした</title><link>https://blog.nfurudono.com/posts/lazy-nvim/</link><pubDate>Tue, 13 Aug 2024 12:27:07 +0900</pubDate><guid>https://blog.nfurudono.com/posts/lazy-nvim/</guid><description>&lt;p>これまで特にプラグインを使っていなかった（それくらいで済む用途にしか使っていなかった）のだけど、カラースキームを指定したくなったのでプラグインマネージャを入れた。&lt;/p></description></item><item><title>AHK入門</title><link>https://blog.nfurudono.com/posts/ahk/</link><pubDate>Sun, 28 Jul 2024 01:41:34 +0900</pubDate><guid>https://blog.nfurudono.com/posts/ahk/</guid><description>&lt;p>Windowsマシンでキーボード操作が不便なので導入する。悪態をつきながらも使っている人を知っているので内容を理解していないが期待している。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" id="インストール" class="anchor" aria-hidden="true">インストール&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.autohotkey.com/">https://www.autohotkey.com/&lt;/a> 公式ページからバイナリを落とせる。インストールするとwelcome画面が開いたのだが、そこに「コンパイルする」ボタンがあって、ちょっと不安になる。僕はプログラムをボタンを押してコンパイルしないといけない？&lt;/p></description></item><item><title>認可に入門 wip</title><link>https://blog.nfurudono.com/posts/learn-authorization/</link><pubDate>Mon, 24 Jun 2024 20:24:08 +0900</pubDate><guid>https://blog.nfurudono.com/posts/learn-authorization/</guid><description>&lt;p>&lt;a href="https://www.osohq.com/academy">https://www.osohq.com/academy&lt;/a>
これを読んで認可に入門します。頑張るぞ〜！&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a4%e3%83%b3%e3%83%88%e3%83%ad" id="イントロ" class="anchor" aria-hidden="true">イントロ&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.osohq.com/academy/authorization-academy">https://www.osohq.com/academy/authorization-academy&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Chapter II: What authorization is: how to organize your authorization code
Chapter III: Role-based access control: grouping permissions in your app into roles like User and Admin
Chapter IV: Relationship-based control: grouping permissions by relationship, like &amp;ldquo;the creator of a post may edit that post&amp;rdquo;
Chapter V: Authorization enforcement: once your app has decided to allow or deny access, what do you do with that decision?&lt;/p></description></item><item><title>半開閉区間</title><link>https://blog.nfurudono.com/posts/semi-open-interval/</link><pubDate>Wed, 29 May 2024 20:57:08 +0900</pubDate><guid>https://blog.nfurudono.com/posts/semi-open-interval/</guid><description>&lt;h2>
&lt;a href="#%e5%8f%82%e7%85%a7" id="参照" class="anchor" aria-hidden="true">参照&lt;/a>
&lt;/h2>
&lt;p>コンピュータで区間処理するときは半開閉区間で持つことが多い気がしている。もはや信仰のレベルで身についているので自分一人で決めて終わりなときはそれで良いのだが、説明が必要なときに困る。そのときのために良さげな参照を集めておく。&lt;/p></description></item><item><title>RubyKaigi2024参加メモ</title><link>https://blog.nfurudono.com/posts/rubykaigi2024/</link><pubDate>Sat, 18 May 2024 18:51:00 +0900</pubDate><guid>https://blog.nfurudono.com/posts/rubykaigi2024/</guid><description>&lt;p>RubyKaigi2024に参加したので、思ったことをメモしておきます。&lt;/p>
&lt;p>参加したセッションはこちら: &lt;a href="https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3">https://rubykaigi.smarthr.co.jp/2024/plans/d2350276-c631-4bdc-ad75-49e446e798a3&lt;/a>&lt;/p>
&lt;h2>
&lt;a href="#shopify%e3%81%8c%e3%81%99%e3%81%94%e3%81%84" id="shopifyがすごい" class="anchor" aria-hidden="true">shopifyがすごい&lt;/a>
&lt;/h2>
&lt;p>今回のセッションをいくつか聞いてShopifyのやり方に憧れるようになった。エンジニアリングをしていく上での姿勢として、課題に対して上流から対処しよう、みたいな箴言があってそれが心に残っている。
ShopifyのRuby周りのチームはまさにそれを地で行っていると今回のセッションを聞いて感じたそういうチームに所属して（作って？）良いエンジニアリングをしていきたいと思っていたのだが、これまでは具体的なイメージいを持っていなかった。&lt;/p></description></item><item><title>2024年4月での振り返り</title><link>https://blog.nfurudono.com/posts/2024-04/</link><pubDate>Tue, 30 Apr 2024 23:56:14 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2024-04/</guid><description>&lt;h2>
&lt;a href="#%e8%bf%91%e6%b3%81" id="近況" class="anchor" aria-hidden="true">近況&lt;/a>
&lt;/h2>
&lt;p>4月が終わるので（？）最近のことを振り返る。&lt;/p>
&lt;p>1月に配属されて、2月開発にプロジェクトが始まってからずっと&lt;a href="https://gamers.lolipop.jp/">LOLIPOP! for gamers&lt;/a>を作り続けている。今まで本で読んだようないろんな苦しみを体感できて楽しい。プログラミングに関することや、設計とか技術選定、開発体制や組織、チームとか締切とか工数みたいな大変さを一通り味わったと思う。&lt;/p></description></item><item><title>インテリア</title><link>https://blog.nfurudono.com/posts/interia/</link><pubDate>Mon, 29 Apr 2024 00:42:38 +0900</pubDate><guid>https://blog.nfurudono.com/posts/interia/</guid><description>&lt;h2>
&lt;a href="#2024-04-29" id="2024-04-29" class="anchor" aria-hidden="true">2024-04-29&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.nfurudono.com/daily/2024-02-12/#%e5%ae%b6%e3%81%ae%e3%82%a4%e3%83%b3%e3%83%86%e3%83%aa%e3%82%a2">以前インテリアについて書いた&lt;/a>続きを不定期でやっている。前回は以下のように書いていた。&lt;/p>
&lt;blockquote>
&lt;p>今日たくさん寝て軽くランニングしたらなかなか幸せな時間を過ごせた。ただいまはそのクオリティが持続していない。夕食の目処が立っていないこととか部屋がちょっと寒いこと、姿勢が微妙なことが原因だろう。軽く座って作業する空間はやはり欲しい。机にがっつり向かうか後傾でノートパソコンを叩くか、床で作業するかの三択でQOLっぽい作業時間を過ごす空間がない。コメダで作業する姿勢を家でも取れるようにしたいイメージ。やはりベンチソファだと思うんだよな。僕のユースケースだとソファだけでなく机も欲しいことに気がついたのが今週末の成果。&lt;/p></description></item><item><title>hugoで多言語対応始めた</title><link>https://blog.nfurudono.com/posts/multi-lang-on-hugo/</link><pubDate>Thu, 18 Apr 2024 01:51:54 +0900</pubDate><guid>https://blog.nfurudono.com/posts/multi-lang-on-hugo/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/commit/b4966a3e96c2a8131da6d623cef85df5c97439ba">https://github.com/naoyafurudono/naoyafurudono.github.io/commit/b4966a3e96c2a8131da6d623cef85df5c97439ba&lt;/a>
このコミットみたいな感じで設定したりファイル名を変えたりすると、いい感じにパスを掘ってくれる。&lt;/p>
&lt;p>パスを掘ってくれる以外のメリットは知らない。&lt;/p></description></item><item><title>ElmアーキテクチャをReactで実現する話</title><link>https://blog.nfurudono.com/posts/elm-architecture/</link><pubDate>Thu, 18 Apr 2024 00:58:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/elm-architecture/</guid><description>&lt;h2>
&lt;a href="#elm%e3%82%a2%e3%83%bc%e3%82%ad%e3%83%86%e3%82%af%e3%83%81%e3%83%a3" id="elmアーキテクチャ" class="anchor" aria-hidden="true">Elmアーキテクチャ&lt;/a>
&lt;/h2>
&lt;p>リアクティブプログラミングの勉強をしていた頃にElm言語を知って好きになった（全然コード書いてないけど）。特徴はElmアーキテクチャにあると思っている。
Webアプリケーションの大体のフロントエンドアプリケーションはこう言うアーキテクチャで表現できるはず、みたいなことを言っていて、そのアーキテクチャが簡単なので気に入ったのだろう。&lt;/p></description></item><item><title>Nextjsのプロジェクトにstorybookを導入してみた</title><link>https://blog.nfurudono.com/posts/install-storybook-next/</link><pubDate>Tue, 26 Mar 2024 01:51:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/install-storybook-next/</guid><description>&lt;h2>
&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8" id="やったこと" class="anchor" aria-hidden="true">やったこと&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/timer/pull/1">https://github.com/naoyafurudono/timer/pull/1&lt;/a>&lt;/p>
&lt;p>このプルリクエストで頑張った。コミットメッセージにやったことは書いてある。&lt;/p>
&lt;h2>
&lt;a href="#%e5%8f%82%e8%80%83" id="参考" class="anchor" aria-hidden="true">参考&lt;/a>
&lt;/h2>
&lt;p>公式ドキュメントがしっかりしてそう。storybookが内部で使っているwebpackが&lt;code>@&lt;/code> インポートを読めないみたいで、プラグインを入れる必要があった。&lt;/p></description></item><item><title>推し言語機能 Racket編</title><link>https://blog.nfurudono.com/posts/fav-racket-features/</link><pubDate>Tue, 19 Dec 2023 22:33:05 +0900</pubDate><guid>https://blog.nfurudono.com/posts/fav-racket-features/</guid><description>&lt;p>この記事は&lt;a href="https://adventar.org/calendars/8634">GMOペパボエンジニア Advent Calendar 2023 🎅会場&lt;/a>の19日の記事です！&lt;/p>
&lt;p>昨日はyagijinさんのReactやってる人向けのSwiftUI入門でした。
Swiftに興味があるReact信者の僕のために書いてくれたのかと錯覚しました。これを期にSwift UI入門しようと思います。
Swift UIは双方向バインディングを採用しているとのことなので、Vueとの類似もありそうですね。&lt;/p></description></item><item><title>2023-09振り返り</title><link>https://blog.nfurudono.com/posts/2023-09/</link><pubDate>Mon, 02 Oct 2023 00:13:15 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2023-09/</guid><description>&lt;p>今月はインカレの運営準備と仕事を頑張った。またカレーとボルダリングを始めた。&lt;/p>
&lt;p>インカレでは人に仕事を回す仕事でしっかりキャパオーバーした経験をできた。おかげで価値観を少し変えることができて、瞬殺できるタスクはすぐに瞬殺するのが楽だと思えるようになったし、瞬殺できない仕事もなんとか小さくしようともがけるようになった。この辺りは仕事でも意識しているところで、二つのサンプルがうまいこと僕の中で補い合って学びを得る機械になってくれた形だと思う。どちらもちゃんとした人たちが一緒に仕事をしてくれてフィードバックもくれる環境だから実現しているのだと思う。感謝だし、この環境に身をおけた運と自分を褒めてあげたい。&lt;/p></description></item><item><title>GASでスライド生成</title><link>https://blog.nfurudono.com/posts/generate-slides-from-template/</link><pubDate>Sun, 01 Oct 2023 23:29:39 +0900</pubDate><guid>https://blog.nfurudono.com/posts/generate-slides-from-template/</guid><description>&lt;p>Google Slidesで作成したテンプレートファイルに文字列を置換する形でスライドを生成するスクリプトをChat GPTに書いてもらったのでメモ。&lt;/p>
&lt;pre>&lt;code class="language-aa">+--------------------------------+
| |
| {{氏名}} |
| |
| |
| {{住所}} |
+--------------------------------+
&lt;/code>&lt;/pre>
&lt;p>みたいなスライドを作って、&lt;/p></description></item><item><title>ベストバイ</title><link>https://blog.nfurudono.com/posts/2023-09-bestbuy/</link><pubDate>Wed, 13 Sep 2023 22:49:06 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2023-09-bestbuy/</guid><description>&lt;p>酔っていて興が乗ったので「しばらくの間で買って良かったもの」N選をやります！！&lt;/p>
&lt;h2>
&lt;a href="#%e6%9c%ac%e6%a3%9a" id="本棚" class="anchor" aria-hidden="true">本棚&lt;/a>
&lt;/h2>
&lt;p>本棚を買いました！横に長いタイプの本棚で、高さは太ももくらいです。二段だけで、本棚の上にも物を置けるような感じ。幅は120cmくらい（ところでセンチって微妙ですよね）で、横に長めの本棚です。
2cmくらいの厚さのベニヤ？でできていて、それなりに丈夫そうな雰囲気があります。
minneで買いました。一階にプログラミング言語のほんを置いて、2階にそのほかの本を置いています。本棚にある本の中でのおすすめは、『数学の基礎 集合・数・位相』です。これを読むと実数の作り方がわかって感動できます。また、眠れない夜にぴったりで、楽しめるときには存分に興奮できるし、そうでもないときには眠くなります。ホテルに聖書の代わりにこれを置いたらいいのにと思ってます。&lt;/p></description></item><item><title>ブログを分割したい</title><link>https://blog.nfurudono.com/posts/divide-dev-posts/</link><pubDate>Wed, 06 Sep 2023 21:06:05 +0900</pubDate><guid>https://blog.nfurudono.com/posts/divide-dev-posts/</guid><description>&lt;p>このブログは日記も開発っぽいことも両方書いてある。これらを別のサイトに分けようと考えている。&lt;/p>
&lt;ul>
&lt;li>開発の記事が日記に埋もれるのが嫌だから&lt;/li>
&lt;li>今の環境だと開発の記事を書きにくい・表現しにくいから
&lt;ul>
&lt;li>コードや数式を書きにくい・表示が微妙など&lt;/li>
&lt;li>madoko使いたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>そのための準備としてnetlifyを試しに使ってみた。このブログのリポジトリを登録したら、特に細かい設定をしないでもシュッとデプロイできてしまった。すごい。DNSとかSSLとかの設定を試していく。&lt;/p></description></item><item><title>契約と型検査</title><link>https://blog.nfurudono.com/posts/contract-programming/</link><pubDate>Thu, 31 Aug 2023 21:49:38 +0900</pubDate><guid>https://blog.nfurudono.com/posts/contract-programming/</guid><description>&lt;p>プログラミングの型検査・契約・テストについて書きます。お酒を飲みながら書きました。注意は払ったつもりですが、変なところがあるかもしれません。&lt;/p>
&lt;ul>
&lt;li>契約とは何か
&lt;ul>
&lt;li>例を含める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>どんな嬉しさがあるか&lt;/li>
&lt;li>型検査との兼ね合い&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e5%a5%91%e7%b4%84%e3%81%a8%e3%81%af%e4%bd%95%e3%81%8b" id="契約とは何か" class="anchor" aria-hidden="true">契約とは何か&lt;/a>
&lt;/h2>
&lt;p>契約 (contract) とはプラグラムの関数の入出力に関する規約のことです。例えば整数の割り算をする &lt;code>div&lt;/code> 関数は、二つの整数を受け取って商を返す関数だとしましょう。このとき、入力の二つの値は&lt;/p></description></item><item><title>タスク分解と見積もり</title><link>https://blog.nfurudono.com/posts/task-decomposition/</link><pubDate>Thu, 31 Aug 2023 20:58:00 +0900</pubDate><guid>https://blog.nfurudono.com/posts/task-decomposition/</guid><description>&lt;h2>
&lt;a href="#%e8%a6%8b%e7%a9%8d%e3%82%82%e3%82%8a%e3%81%a8%e7%9b%ae%e6%a8%99" id="見積もりと目標" class="anchor" aria-hidden="true">見積もりと目標&lt;/a>
&lt;/h2>
&lt;p>見積もりとかについて真面目に考えてみる。&lt;/p>
&lt;p>仕事をするときに、頑張ります！と意気込んで、目標を分解しひとつひとつこなしていくことはある程度できるし、途中で分解したタスクが違った方を向いていることに気がついて、自分がやることを軌道修正することもできる。&lt;/p></description></item><item><title>dotfilesのセットアップスクリプトを書いた</title><link>https://blog.nfurudono.com/posts/dotfiles-setup/</link><pubDate>Thu, 17 Aug 2023 01:15:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/dotfiles-setup/</guid><description>&lt;h2>
&lt;a href="#%e5%8b%95%e6%a9%9f" id="動機" class="anchor" aria-hidden="true">動機&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/naoyafurudono/dotfiles/tree/main">dotfiles&lt;/a>をGitHubで管理しているのだが、今までは設定ファイルの管理だけで、インストールは手動で行なっていた。設定ファイルを使いまわせるだけでだいぶ便利なんだけど、コンテナ環境の中で作業したくなると、手動インストールに耐えられなくなる。そこで重い腰を上げてセットアップを自動化した。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8" id="やったこと" class="anchor" aria-hidden="true">やったこと&lt;/a>
&lt;/h2>
&lt;h3>
&lt;a href="#cli%e7%92%b0%e5%a2%83%e3%81%ae%e3%82%bb%e3%83%83%e3%83%88%e3%82%a2%e3%83%83%e3%83%97%e3%82%92%e7%b0%a1%e5%8d%98%e3%81%ab%e3%81%97%e3%81%9f" id="cli環境のセットアップを簡単にした" class="anchor" aria-hidden="true">CLI環境のセットアップを簡単にした&lt;/a>
&lt;/h3>
&lt;p>&lt;code>git&lt;/code> のインストールと以下の実行でok。
nvimとかfishとかcargoとかが入る。&lt;/p></description></item><item><title>arm64のメモ</title><link>https://blog.nfurudono.com/posts/arm64/</link><pubDate>Sat, 15 Jul 2023 16:17:21 +0900</pubDate><guid>https://blog.nfurudono.com/posts/arm64/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/comp">Cコンパイラを実装する&lt;/a>ためにarm64のことを調べている。この記事はそのメモ。&lt;/p>
&lt;h2>
&lt;a href="#%e5%85%ac%e5%bc%8f%e3%83%89%e3%82%ad%e3%83%a5%e3%83%a1%e3%83%b3%e3%83%88" id="公式ドキュメント" class="anchor" aria-hidden="true">公式ドキュメント&lt;/a>
&lt;/h2>
&lt;p>よくあるソフトウェアのライブラリについているドキュメントとは毛色が違う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.arm.com/documentation/den0024/a/An-Introduction-to-the-ARMv8-Instruction-Sets">Armv8-A Instruction Set Architecture&lt;/a>が優しい
&lt;ul>
&lt;li>&lt;a href="https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/Learn%20the%20Architecture/Armv8-A%20Instruction%20Set%20Architecture.pdf?revision=ebf53406-04fd-4c67-a485-1b329febfb3e">PDF版もある&lt;/a>。空白多めのシングルカラム39ページなのでサクッと読める。最初に読んでおくと幸せになれたかも。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/ARM-software/abi-aa/releases/download/2023Q1/aapcs64.pdf">Procedure Call Standard for the Arm® 64-bit Architecture (AArch64) (pdf)&lt;/a>がCコンパイラを実装するときに気になる細かいことをコンパクトにまとめてそうな印象。&lt;/li>
&lt;li>上のドキュメントを含む&lt;a href="https://github.com/ARM-software/abi-aa/releases">公式のリンク集がある&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2>
&lt;a href="#%e3%83%84%e3%83%bc%e3%83%ab" id="ツール" class="anchor" aria-hidden="true">ツール&lt;/a>
&lt;/h2>
&lt;p>Arm macを使っている人の話です。&lt;/p></description></item><item><title>2023-05振り返り</title><link>https://blog.nfurudono.com/posts/2023-05/</link><pubDate>Wed, 31 May 2023 19:47:51 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2023-05/</guid><description>&lt;h2>
&lt;a href="#5%e6%9c%88%e3%81%ae%e3%81%b5%e3%82%8a%e3%81%8b%e3%81%88%e3%82%8a" id="5月のふりかえり" class="anchor" aria-hidden="true">5月のふりかえり&lt;/a>
&lt;/h2>
&lt;p>月末なので気まぐれに今月を振り返る。&lt;/p>
&lt;h3>
&lt;a href="#%e4%bc%9a%e7%a4%be" id="会社" class="anchor" aria-hidden="true">会社&lt;/a>
&lt;/h3>
&lt;p>エンジニア研修が始まった。ビジネスっぽい話も面白かったけど、エンジニアっぽい話とは違う面白さだった。プログラムに関して議論するのはやはり楽しい。&lt;/p></description></item><item><title>alcoholタグの運用</title><link>https://blog.nfurudono.com/posts/alc-tag/</link><pubDate>Fri, 28 Apr 2023 00:33:40 +0900</pubDate><guid>https://blog.nfurudono.com/posts/alc-tag/</guid><description>&lt;p>ブログの&amp;quot;alcohol&amp;quot;タグをいつからか使い始めた。当初はお酒に関する記事につけるタグのつもりで使い始めたのだが、この度アルコールが入った状態で書いた記事にもつけることにした。&lt;/p></description></item><item><title>学生生活の振り返り（技術）</title><link>https://blog.nfurudono.com/posts/univ-tech/</link><pubDate>Sat, 01 Apr 2023 12:20:20 +0900</pubDate><guid>https://blog.nfurudono.com/posts/univ-tech/</guid><description>&lt;h2>
&lt;a href="#%e3%81%be%e3%81%88%e3%81%8c%e3%81%8d" id="まえがき" class="anchor" aria-hidden="true">まえがき&lt;/a>
&lt;/h2>
&lt;p>昨日学籍を失って、こんど入社式に出る。学校に入ったり研究室に所属したり、就職したりするときには自分が抱える課題と向き合い、自分の幸せについて考えて進路を決めてきた。これから先はそういう機会が来たことに気が付きにくくなるだろう。&lt;/p></description></item><item><title>GitHub Actionsの実行結果をDiscordに通知</title><link>https://blog.nfurudono.com/posts/notify-github-actions/</link><pubDate>Thu, 30 Mar 2023 14:04:28 +0900</pubDate><guid>https://blog.nfurudono.com/posts/notify-github-actions/</guid><description>&lt;p>このブログはGitHub Actionsでデプロイしているのだが、ここしばらくデプロイに失敗したことに気が付かずに放置してしまっていた。&lt;/p>
&lt;p>&lt;a href="https://github.com/marketplace/actions/actions-status-discord">Actions Status Discord&lt;/a>というアクションを&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/commit/1f7a900b4c8aa166dd735c61ee1667119b23e810">デプロイの最後に叩く&lt;/a>ことで、いい感じの通知をDiscordにWebhook経由で送れる。&lt;/p></description></item><item><title>Hugoのマークダウン処理をカスタム</title><link>https://blog.nfurudono.com/posts/custom-markdown-translation-with-hugo/</link><pubDate>Thu, 30 Mar 2023 13:27:46 +0900</pubDate><guid>https://blog.nfurudono.com/posts/custom-markdown-translation-with-hugo/</guid><description>&lt;h2>
&lt;a href="#%e8%83%8c%e6%99%af" id="背景" class="anchor" aria-hidden="true">背景&lt;/a>
&lt;/h2>
&lt;p>HTML文書のheading要素の周りには&lt;code>id&lt;/code>がついていてほしいし、それへのリンクは手軽にコピーできて欲しい。その点Googleのドキュメントはとても好き。人に文書コンテンツを渡すときにこちらの意図がURLで表現できるし、そのリンクを踏んだ側も見るべき箇所にスムーズにたどり着ける。このブログを書くのに使っているHugoでも同じことをした。&lt;/p></description></item><item><title>使い勝手の良いデスクトップ向けウィンドウマネージャが欲しい</title><link>https://blog.nfurudono.com/posts/window-manager/</link><pubDate>Thu, 16 Mar 2023 11:50:52 +0900</pubDate><guid>https://blog.nfurudono.com/posts/window-manager/</guid><description>&lt;p>使い勝手のよいウィンドウマネージャがWindowsとかMacに搭載されることはないだろう。使うアプリケーションやブラウザ、入力デバイスやその使い方によって使い勝手が大きく変わるだろうから。
OSが決め打ちで提供できるものでは無いんじゃないかと思う。なので自分でまじめに使い勝手の良いものを考える必要がある。&lt;/p></description></item><item><title>エフェクトハンドラの良さと実用性について</title><link>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</link><pubDate>Thu, 16 Mar 2023 10:57:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/effect-handlers-without-continuation/</guid><description>&lt;p>エフェクトハンドラで継続や代数的エフェクトを扱う必要性は一ミリもなくて、実用的にそれらが欲しくなることはないか、あるいは限られていてそこまで一般的な機能を提供する必要はないんじゃないかと感じている。&lt;/p></description></item><item><title>Google Cloudの認証を必要とするアプリケーション開発について</title><link>https://blog.nfurudono.com/posts/gcp-cred/</link><pubDate>Tue, 14 Mar 2023 19:19:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/gcp-cred/</guid><description>&lt;p>Google Cloudの認証・認可はきめ細かくちゃんとしている感じがして、扱うのが難しいと感じていた。少し調べたら&lt;a href="https://cloud.google.com/docs/authentication/client-libraries#adc">Application Default Credentials with client libraries&lt;/a>の説明を見つけて腹に落ちた。これを抑えた上で、&lt;a href="https://cloud.google.com/docs/authentication/provide-credentials-adc#how_to_provide_credentials_to_adc">それぞれの実行環境でどのようにcredentialをセットアップするか&lt;/a>を見ると、プロセスの権限が半分くらいわかる。ここまでで、サービスアカウントがどのようにプロセスに付与されるかを理解できるはずだ。&lt;/p></description></item><item><title>Linux (gnome) でよくやる設定</title><link>https://blog.nfurudono.com/posts/linux-keys/</link><pubDate>Tue, 28 Feb 2023 01:59:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/linux-keys/</guid><description>&lt;p>GNOMEというかLinuxというかでよくやる設定を列挙する。キーボード系が多いと思う。&lt;/p>
&lt;h3>
&lt;a href="#gnome-terminal-%e3%81%a7ctrl-shift-tab%e3%82%92%e6%9c%89%e5%8a%b9%e3%81%ab%e3%81%99%e3%82%8b" id="gnome-terminal-でctrl-shift-tabを有効にする" class="anchor" aria-hidden="true">gnome-terminal で&lt;code>ctrl-(shift-)?tab&lt;/code>を有効にする&lt;/a>
&lt;/h3>
&lt;p>以下を実行&lt;/p></description></item><item><title>軽いドキュメントを印刷するためのツールが欲しい</title><link>https://blog.nfurudono.com/posts/print-docs/</link><pubDate>Fri, 24 Feb 2023 17:48:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/print-docs/</guid><description>&lt;p>さくっと書いた文書を印刷したいことがある。ビジネスライクな手紙とか、その日のTODOリストなんかがそうだ。
LaTeXやMadokoを使うのは大げさな感じがして、諦めて手書きするか、Google Docsで済ませることが多い。とはいえ手紙の書き方を毎回調べたり、フォーマットを調整したり、PCで打ち込んだデータを手書きするのはつらい。&lt;/p></description></item><item><title>PCの構成メモ</title><link>https://blog.nfurudono.com/posts/my-pc/</link><pubDate>Thu, 23 Feb 2023 14:22:44 +0900</pubDate><guid>https://blog.nfurudono.com/posts/my-pc/</guid><description>&lt;p>PCを自作して使っているのだけど、どんなパーツを使ったか忘れて後でなにか買い足すときに互換性があるかわからなくてこまる。今回調査してメモしておく。&lt;/p></description></item><item><title>HugoでタグをつけるためのTips</title><link>https://blog.nfurudono.com/posts/tips-for-tagging/</link><pubDate>Thu, 16 Feb 2023 16:34:49 +0900</pubDate><guid>https://blog.nfurudono.com/posts/tips-for-tagging/</guid><description>&lt;p>車輪の再発明ではあるだろうけどメモしておく。&lt;code>archetypes/&lt;/code>に&lt;code>hugo new&lt;/code>で生成する&lt;code>.md&lt;/code>ファイルのテンプレを置くことができる。そこにありうるすべてのタグを書いておけば、記事を書くときに関係ないタグを消すことで、関連するタグを忘れずにつけることができる。&lt;/p></description></item><item><title>好きなPL本</title><link>https://blog.nfurudono.com/posts/fav-pl-article/</link><pubDate>Thu, 16 Feb 2023 02:08:43 +0900</pubDate><guid>https://blog.nfurudono.com/posts/fav-pl-article/</guid><description>&lt;p>プログラミング言語を勉強するとイディオムとかその言語界隈でのベストプラクティスが学べて良い、みたいなことが巷でよく言われる。確かにそれはそのとおりだとぼくも感じるのだが、雑にチュートリアルをこなしたりするだけでは言語をよく学べないだろうと思うし、良い情報源を見つけることはそんなに簡単ではないと感じている。&lt;/p></description></item><item><title>Pythonのジェネレータをyieldで書く例</title><link>https://blog.nfurudono.com/posts/python-generator/</link><pubDate>Fri, 06 Jan 2023 17:47:42 +0900</pubDate><guid>https://blog.nfurudono.com/posts/python-generator/</guid><description>&lt;p>Pythonのジェネレータ（というより&lt;code>yield&lt;/code>）の挙動を示す例を書いた。二分木を作る&lt;code>gen&lt;/code>と、ノードを探索してその内容を表す文字列を返すジェネレータを返す&lt;code>conv&lt;/code>を定義した。&lt;code>conv&lt;/code>がこういう風に定義できることを例で確認したかった。&lt;/p></description></item><item><title>2023年にやりたいこと</title><link>https://blog.nfurudono.com/posts/2023-todo/</link><pubDate>Thu, 29 Dec 2022 15:27:02 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2023-todo/</guid><description>&lt;p>来年の抱負じゃないけど、一息ついたタイミングでやりたいことを整理しておくとどこかのタイミングで役に立つかもしれない。&lt;/p>
&lt;h2>
&lt;a href="#%e4%bb%8a%e5%b9%b4%e3%81%ae%e3%81%be%e3%81%a8%e3%82%81" id="今年のまとめ" class="anchor" aria-hidden="true">今年のまとめ&lt;/a>
&lt;/h2>
&lt;p>今年は人生で一番プログラミングした気がする。
3月の末にmerpayで短期のインターンに参加したのを皮切りに、
4月にキャディでのアルバイトをはじめるなど、プログラミングをする機会が増えた一年だった。研究でもインタプリタをゴリゴリ書いてみるなどした。最近は講義で簡単な定理証明支援系の実装に挑戦している。変わり種としては、IBMの方々が講師として開催されているJVM関連のコンパイラ/VMの講義にも参加している。&lt;/p></description></item><item><title>git grep で検索して置換</title><link>https://blog.nfurudono.com/posts/replace-with-git-grep/</link><pubDate>Sun, 18 Dec 2022 23:20:30 +0900</pubDate><guid>https://blog.nfurudono.com/posts/replace-with-git-grep/</guid><description>&lt;p>&lt;code>git grep&lt;/code>は便利なのだが、置換の機能がない。ぐぐると&lt;code>sed&lt;/code>と組み合わせて置換する方法がたくさんでてくる。スクリプトファイルに書き込んだのでメモしておく。&lt;/p></description></item><item><title>読書メモ: Go言語による並行処理</title><link>https://blog.nfurudono.com/posts/memo-concurrency-in-go/</link><pubDate>Fri, 25 Nov 2022 15:05:49 +0900</pubDate><guid>https://blog.nfurudono.com/posts/memo-concurrency-in-go/</guid><description>&lt;p>ちゃんと読もうと思ったときのための自分向けのメモ。&lt;/p>
&lt;ul>
&lt;li>プログラミング技法を学びたいなら3,4章&lt;/li>
&lt;li>Golangの復習をしたいなら3章&lt;/li>
&lt;li>Golangのランタイムを覗きたいなら6章を読むと良さそう。&lt;/li>
&lt;/ul>
&lt;p>ざっと見た感じ、だいぶ信用して良さそうに思える。積極的に読んでいこう。&lt;/p></description></item><item><title>Hugoでページネーションを無効化</title><link>https://blog.nfurudono.com/posts/disable-hugo-pagination/</link><pubDate>Thu, 24 Nov 2022 15:55:03 +0900</pubDate><guid>https://blog.nfurudono.com/posts/disable-hugo-pagination/</guid><description>&lt;p>&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/commit/103975b47aba0b12b6b3fb5ff71caf04b591381d">このコミット&lt;/a>
でトップページのページネーションを無効化した。やったことは以下の通り。&lt;/p>
&lt;ul>
&lt;li>&lt;code>.Pagenator&lt;/code>を使わないようにする&lt;/li>
&lt;li>対象のポストを全件表示するようにする&lt;/li>
&lt;li>ページネータを消す&lt;/li>
&lt;/ul>
&lt;p>最初の一つが&lt;code>page/2/&lt;/code>みたいなページ生成を抑止して、次の２つがトップページの見た目を変える。ページネータを消せば自然に&lt;code>.Pagenator&lt;/code>を使わないようになるはずだ。&lt;/p></description></item><item><title>Church Encoded List in JS</title><link>https://blog.nfurudono.com/posts/church-encoded-list-in-js/</link><pubDate>Fri, 28 Oct 2022 18:21:12 +0900</pubDate><guid>https://blog.nfurudono.com/posts/church-encoded-list-in-js/</guid><description>&lt;p>Charch encodingで書いたリストの動くものがほしかったので書き下した。&lt;code>isnil&lt;/code>を実現するためにコンスを&lt;code>isnil&lt;/code>、&lt;code>car&lt;/code>、&lt;code>cdr&lt;/code>からなるペアとして表現した。&lt;/p></description></item><item><title>Mozc のデフォルトエンジンを設定する方法 2022 Oct</title><link>https://blog.nfurudono.com/posts/mozc-default-engine/</link><pubDate>Fri, 28 Oct 2022 17:24:06 +0900</pubDate><guid>https://blog.nfurudono.com/posts/mozc-default-engine/</guid><description>&lt;p>設定ファイルを書き換えるとmozcのデフォルトを日本語入力にできる。
Ubuntu22.10でしか試していないことに注意。&lt;/p>
&lt;pre>&lt;code>$ cat ~/.config/mozc/ibus_config.textproto
engines {
 name : &amp;quot;mozc-jp&amp;quot;
 longname : &amp;quot;Mozc&amp;quot;
 layout : &amp;quot;default&amp;quot;
}
active_on_launch: True
&lt;/code>&lt;/pre>
&lt;h2>
&lt;a href="#%e7%92%b0%e5%a2%83" id="環境" class="anchor" aria-hidden="true">環境&lt;/a>
&lt;/h2>
&lt;pre>&lt;code>Distributor ID:	Ubuntu
Description:	Ubuntu 22.10
Release:	22.10
Codename:	kinetic
&lt;/code>&lt;/pre>
&lt;h2>
&lt;a href="#%e9%95%b7%e3%81%84%e8%aa%ac%e6%98%8e" id="長い説明" class="anchor" aria-hidden="true">長い説明&lt;/a>
&lt;/h2>
&lt;p>Ubuntuで日本語をmozc、ローマ字を元から入っているUSのなにかで入力している。このやり方のありがちな課題として、mozcのデフォルトが直接入力になっていることがある。安直に対処するなら、ubuntuにログインするたびGUIでmozcの切り替えを行えばよいが、毎回操作するのは面倒だ。デフォルトで日本語モードにすれば良くて、その実現方法を冒頭に載せた。&lt;/p></description></item><item><title>aptのドキュメント整理</title><link>https://blog.nfurudono.com/posts/learn-apt/</link><pubDate>Sat, 22 Oct 2022 00:51:48 +0900</pubDate><guid>https://blog.nfurudono.com/posts/learn-apt/</guid><description>&lt;p>雰囲気でaptを使っていて、リポジトリ周りの扱いに困ることがある。この手のツールは一生使うだろうから勉強して損はないだろう。この記事には読んだドキュメントと一言コメントを残しておく。&lt;/p></description></item><item><title>エフェクトハンドラと依存性注入の関係について調べる （文献調査）</title><link>https://blog.nfurudono.com/posts/effect-handlers-dependency-injection/</link><pubDate>Fri, 14 Oct 2022 01:59:31 +0900</pubDate><guid>https://blog.nfurudono.com/posts/effect-handlers-dependency-injection/</guid><description>&lt;p>僕はエフェクトハンドラについてそれなりに理解していると思う。一方で依存性注入についてはふわっとしか知らない。&lt;/p>
&lt;p>そんな状態ではあるけれど、エフェクトハンドラは関数型プログラミングで依存性注入するための素直な表現に使えるのではないかと感じている。&lt;/p></description></item><item><title>Linuxコマンドがわからない学部生について</title><link>https://blog.nfurudono.com/posts/ta-command/</link><pubDate>Wed, 12 Oct 2022 23:50:43 +0900</pubDate><guid>https://blog.nfurudono.com/posts/ta-command/</guid><description>&lt;p>学部生や教育を非難したり愚痴を言ったりするつもりはない。&lt;/p>
&lt;p>情報系の学部2年生向けのプログラミングの講義でTAをやっている。
Linuxコマンド（ &lt;code>cd&lt;/code> とか &lt;code>ls&lt;/code> 、 &lt;code>git&lt;/code> など）を知らないとか、ディレクトリやパスなどの周辺の概念を知らない学生が少なくないように感じる。&lt;/p></description></item><item><title>格安の引越し業者が良かった</title><link>https://blog.nfurudono.com/posts/moving/</link><pubDate>Wed, 12 Oct 2022 23:17:55 +0900</pubDate><guid>https://blog.nfurudono.com/posts/moving/</guid><description>&lt;p>今日引越しをした。
1年半くらい住んだ家から学校の近くへ引越した。動機は学校がオフラインになったから。告知から実行までが短くて困った。
2週間後から週4で対面参加せよと言われて強引だなあという気持ち。なんにせよ、この状況では学校の近くに住むのが有利なので引っ越すことにしたのだ。新居はそれなりにいい感じで、部屋も十分広いし町もよいところに感じた。不満は坂があることと、水回りの設備に伸びしろがあること。&lt;/p></description></item><item><title>Wishlist</title><link>https://blog.nfurudono.com/posts/wishlist/</link><pubDate>Fri, 30 Sep 2022 16:56:23 +0900</pubDate><guid>https://blog.nfurudono.com/posts/wishlist/</guid><description>&lt;p>欲しい / つくりたいソフトウェアのリスト。随時更新していく。&lt;/p>
&lt;ul>
&lt;li>マークダウンフォーマッタ
&lt;ul>
&lt;li>全角文字にうまく対応したり、Madokoのシンタックスを理解したりしてほしい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Syncthingがよさげ</title><link>https://blog.nfurudono.com/posts/syncthing/</link><pubDate>Wed, 28 Sep 2022 16:25:18 +0900</pubDate><guid>https://blog.nfurudono.com/posts/syncthing/</guid><description>&lt;p>オープンソースのソフトウェアで&lt;a href="https://docs.syncthing.net/intro/getting-started.html">Syncthing&lt;/a>
というものを知った。
LAN内のデバイスとはLAN内で、インターネットの先にいるデバイスとはインターネット越しにファイルを同期できるソフトウェアだ。予めクライアントをインストールして、ディレクトリごとに共有設定をしておくと、設定に応じてよしなにファイルを同期してくれる。&lt;/p></description></item><item><title>落し蓋</title><link>https://blog.nfurudono.com/posts/otoshibuta/</link><pubDate>Mon, 19 Sep 2022 22:30:13 +0900</pubDate><guid>https://blog.nfurudono.com/posts/otoshibuta/</guid><description>&lt;p>ひじきの煮物をつくったのだけど、あまり上手にできなかった。その原因をさぐりたい。&lt;/p>
&lt;p>まず、ひじきの量に対して他の具材を入れすぎた。ひじきが主役っぽくなくなってしまった感じ。次に味が結構こくなってしまった。これは煮物という感覚を持たなかったことが敗因だろう。水を入れずに醤油、みりん、めんつゆだけでなんとかしようとして濃くなったの思う。途中で水を追加したけど、味は変わるわけではなく&amp;hellip;。とはいえ、食感はおいしかった。&lt;/p></description></item><item><title>「桜井政博のゲーム作るには」がおもしろい</title><link>https://blog.nfurudono.com/posts/sakurai-youtube-channel/</link><pubDate>Sun, 11 Sep 2022 20:31:45 +0900</pubDate><guid>https://blog.nfurudono.com/posts/sakurai-youtube-channel/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/c/sora_sakurai_jp">桜井政博のゲーム作るには&lt;/a> というYouTubeチャンネルが面白い。ゲームの仕組みに関する知識を説明してくれる。動画のクオリティがすごいし、何より内容が面白い。&lt;/p>
&lt;p>桜井さんが語っているyoutubeラジオ?があった。明日聞いてみよう。&lt;a href="https://www.youtube.com/watch?v=gdJZNN4aJ5U">ものをつくるときに気をつけていること／ゲームクリエイター 桜井政博さん 第１回「ユーザーの身になる」&lt;/a>
を初回として、第４回まであるようだ。一回20minちょっとくらい。&lt;/p></description></item><item><title>Daily Note: 腕時計の電池交換</title><link>https://blog.nfurudono.com/posts/daily-note-watch-battery/</link><pubDate>Sun, 11 Sep 2022 19:38:11 +0900</pubDate><guid>https://blog.nfurudono.com/posts/daily-note-watch-battery/</guid><description>&lt;p>コロナが流行ってから外出する機会が減りそれにともない腕時計をつけることも減った。今度腕時計が必要な用事があるのだけど、電池が切れていたので交換してもらってきた。
1320円かかって、15分ほどで対応してもらえた。電池を買うと500-600円くらいかかるだろうし、工具代はもっとするだろう。作業としては簡単な気がするが、この値段でやってもらえるのはありがたい話だ。この時計の電池交換を何回することになるかはわからないが、それ以外に使いみちのない工具をさがしたり、管理する手間を考えれば安いものである。良い価格設定をしてくれている感じがして、あの時計屋さんを好きになってしまったかもしれない。&lt;/p></description></item><item><title>Ubuntu22でスクリーンショットの保存先を変える方法</title><link>https://blog.nfurudono.com/posts/ubuntu-screenshot/</link><pubDate>Sun, 11 Sep 2022 19:09:03 +0900</pubDate><guid>https://blog.nfurudono.com/posts/ubuntu-screenshot/</guid><description>&lt;p>Ubuntu22でデフォルトのスクリーンショットアプリはおしゃれな見た目をしていてかっこいいのだが、保存先を変える設定が見当たらなくて困っていた。デフォルトでは &lt;code>~/Picture/スクリーンショット/&lt;/code> に保存されるのだが、&lt;code>~/Desktop/&lt;/code> に保存されてほしいのだ。&lt;/p></description></item><item><title>Todo Appを作っている話</title><link>https://blog.nfurudono.com/posts/todo-app/</link><pubDate>Tue, 23 Aug 2022 16:34:04 +0900</pubDate><guid>https://blog.nfurudono.com/posts/todo-app/</guid><description>&lt;p>&lt;strong>この記事は書きかけです。&lt;/strong>&lt;/p>
&lt;p>Todoアプリを作っている。就活の際に Webアプリの開発経験に関する話をするときの題材が欲しかったから。&lt;/p>
&lt;p>GitHub: &lt;a href="https://github.com/naoyafurudono/todo-app">https://github.com/naoyafurudono/todo-app&lt;/a>&lt;/p>
&lt;h2>
&lt;a href="#%e3%83%a2%e3%83%81%e3%83%99%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3" id="モチベーション" class="anchor" aria-hidden="true">モチベーション&lt;/a>
&lt;/h2>
&lt;p>Todoアプリを選んだのは、この手の目的でよく作られているイメージがあるから。FizzBazzみたいな？
見た目だけ整えてもつまらないだろうし、コマンドラインだけで完結するようなものならSQLで良い。作るからにはなにか自分にとって得るものやソフトウェアとして売りになる点が欲しい。&lt;/p></description></item><item><title>Python のfilter関数が良い</title><link>https://blog.nfurudono.com/posts/python-filter/</link><pubDate>Fri, 19 Aug 2022 17:32:37 +0900</pubDate><guid>https://blog.nfurudono.com/posts/python-filter/</guid><description>&lt;p>&lt;a href="https://docs.python.org/ja/3/library/functions.html#filter">ドキュメント&lt;/a> を読むのが早い。&lt;/p>
&lt;p>こういうことができる。&lt;/p>
&lt;pre>&lt;code class="language-sh">$ cat map-none.py 17:34
def f(x):
 if x &amp;lt; 0:
 return x

for i in filter(f, map(lambda a: a-10, range(100) ) ):
 print(i)

$ python3 map-none.py 17:34
-10
-9
-8
-7
-6
-5
-4
-3
-2
-1
&lt;/code>&lt;/pre>
&lt;p>静的型つき言語では &lt;code>f&lt;/code> が &lt;code>maybe&lt;/code> を返すようにして、&lt;code>filter&lt;/code> の代わりに &lt;a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Maybe.html#v:mapMaybe">&lt;code>mapMaybe&lt;/code>&lt;/a> のような関数を使うところだ。
Python のおしいところは、&lt;code>filter&lt;/code> という名前でよぶところか。&lt;/p></description></item><item><title>Reactのしくみを学ぶ</title><link>https://blog.nfurudono.com/posts/learn-react/</link><pubDate>Wed, 10 Aug 2022 18:04:22 +0900</pubDate><guid>https://blog.nfurudono.com/posts/learn-react/</guid><description>&lt;p>この記事は僕の勉強メモです。資料へのポインタが主なコンテンツになるかと思います。更新は随時入るでしょうし、煩わしいので追記した旨も基本的には記しません。&lt;/p></description></item><item><title>救急でのITシステムについて</title><link>https://blog.nfurudono.com/posts/kyukyu/</link><pubDate>Mon, 01 Aug 2022 19:25:29 +0900</pubDate><guid>https://blog.nfurudono.com/posts/kyukyu/</guid><description>&lt;p>全然詳しくないのだけれど、救急で受け入れ先の病院が見つからない問題は改善する見込みはあるのだろうか。きっと受け入れのプロトコルやデータの管理方法や、病院のキャパビリティに課題があるのだろう。プロトコルやデータ管理はITシステムをうまく構成して普及できればなんとかなるはずだ。そういうことを実現しようとする事業は既に存在するのだろうか。少なくとも今はまだ成功していないのだろう。どんなところが実現に対しての障壁になっているのだろうか。&lt;/p></description></item><item><title>円周率とユークリッド空間</title><link>https://blog.nfurudono.com/posts/pi/</link><pubDate>Mon, 01 Aug 2022 17:41:02 +0900</pubDate><guid>https://blog.nfurudono.com/posts/pi/</guid><description>&lt;p>タイトルがこの記事の主なコンテンツなのだが、円周率はユークリッド空間に対して定まる量なのだろう、という推測と同じことを主張しているサイトの紹介をする。&lt;/p></description></item><item><title>Local File Transfer</title><link>https://blog.nfurudono.com/posts/local-file-transfer/</link><pubDate>Thu, 14 Jul 2022 14:02:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/local-file-transfer/</guid><description>&lt;p>近距離でのファイル交換はあまり洗練されていない印象がある。
Apple製品間ではAirdropが使えるし、Windowsにも似たような機能があったはずだ。でも汎用的に（たとえばOSを気にせずに）使える機能は見かけない。そういうときにはGoogle DriveやDropBoxみたいなクラウドサービスを使うか、USBメモリを使うのが一般的だろう。
Slackとかメールに頼ることもある。&lt;/p></description></item><item><title>REPLと単体テスト</title><link>https://blog.nfurudono.com/posts/repl-unit/</link><pubDate>Mon, 11 Jul 2022 19:23:21 +0900</pubDate><guid>https://blog.nfurudono.com/posts/repl-unit/</guid><description>&lt;p>Pythonのことを考えていて、TDDの文脈での単体テストの意義にふと気がついた。つまり、失敗するテストを先に書いて、それを通るように実装をする、という方法論の意義に気がついた、ということだ。&lt;/p></description></item><item><title>UNIXでのパーミッション周りでの振る舞いを調べた</title><link>https://blog.nfurudono.com/posts/syscall/</link><pubDate>Fri, 08 Jul 2022 18:15:10 +0900</pubDate><guid>https://blog.nfurudono.com/posts/syscall/</guid><description>&lt;p>systemcallを初めて書いた。パーミッションの挙動を調べるのがモチベーション。以下を実行できてほしかったのだが、sudoにそんなファイルは無いと怒られてしまう。&lt;/p></description></item><item><title>Systemd</title><link>https://blog.nfurudono.com/posts/systemd/</link><pubDate>Fri, 08 Jul 2022 18:13:10 +0900</pubDate><guid>https://blog.nfurudono.com/posts/systemd/</guid><description>&lt;p>systemdでxremapを追加して、システム起動時に勝手にxremapが走るようにした。&lt;/p>
&lt;p>僕の環境:&lt;/p>
&lt;pre>&lt;code>$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 22.04 LTS
Release:	22.04
Codename:	jammy
&lt;/code>&lt;/pre>
&lt;p>xremapの作者の方が公開している設定を参考にした。&lt;/p></description></item><item><title>Spotify at Commit</title><link>https://blog.nfurudono.com/posts/spotify-at-commit/</link><pubDate>Mon, 04 Jul 2022 13:39:57 +0900</pubDate><guid>https://blog.nfurudono.com/posts/spotify-at-commit/</guid><description>&lt;p>Spotifyの再生が一瞬途切れることがある。そしてそれがシェルコマンドを叩いたタイミングと重なる。どんなカラクリなんだろうか。ただの気のせい？
さっきはコミットしたときに一瞬途切れた。&lt;/p></description></item><item><title>Shell Commands</title><link>https://blog.nfurudono.com/posts/shell-commands/</link><pubDate>Mon, 04 Jul 2022 13:31:01 +0900</pubDate><guid>https://blog.nfurudono.com/posts/shell-commands/</guid><description>&lt;p>パーミッションのことが気になって、シェルコマンドのソースコード（C言語）を読んでいるのだけど、読んでいて楽しい。&lt;code>rm&lt;/code> から読み始めたのだが &lt;code>errorno&lt;/code> やコマンド引数の扱い方、トラバース (ftsを使う) の書き方で学びが得られた。
Goのエラーハンドリングの強さが分かる。&lt;/p></description></item><item><title>競技プログラミング</title><link>https://blog.nfurudono.com/posts/procon/</link><pubDate>Sun, 03 Jul 2022 01:41:50 +0900</pubDate><guid>https://blog.nfurudono.com/posts/procon/</guid><description>&lt;p>数ヶ月前からときどきAtCoder &lt;a href="https://atcoder.jp/users/donofuru">(my account)&lt;/a> のコンテストに参加している。就活とか関数型ではない言語でのプログラミングを意識して始めた。今回のABCで灰色を脱して茶色になったので記念に記録しておく。&lt;/p></description></item><item><title>Phantom Type</title><link>https://blog.nfurudono.com/posts/phantom-type/</link><pubDate>Wed, 29 Jun 2022 14:01:56 +0900</pubDate><guid>https://blog.nfurudono.com/posts/phantom-type/</guid><description>&lt;p>Phantom type (幽霊型) をチラッと学んだのでメモ。きっかけは &lt;a href="https://dl.acm.org/doi/10.1145/3022671.2984009">Gentrification gone too far? affordable 2nd-class values for fun and (co-)effect&lt;/a> を読んでいるときに出てきたこと。&lt;/p>
&lt;p>静的な型を持つ言語で使うテクニックで登場する型（パラメータ）のことをphantom typeという。&lt;/p></description></item><item><title>コードブロックの表示</title><link>https://blog.nfurudono.com/posts/blog-code/</link><pubDate>Tue, 28 Jun 2022 19:34:08 +0900</pubDate><guid>https://blog.nfurudono.com/posts/blog-code/</guid><description>&lt;p>コードブロックの表示が気に入らない。設定をいじって白地にしたい。現状では黒地。というのは、ブログの背景が白だし、僕が普段白地になれているから。&lt;a href="https://jp.quora.com/burauza-ya-Web-saito-nado-no-da-ku-mo-do-ha-jissai-ni-me-ni-yasashii-no-desu-ka/answers/135572570">白地を養護する主張&lt;/a> に影響を受けた。実際目が楽になったような気がする。&lt;/p></description></item><item><title>Golang の変数キャプチャ</title><link>https://blog.nfurudono.com/posts/go-learn-memory-motivation/</link><pubDate>Tue, 28 Jun 2022 17:27:34 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-learn-memory-motivation/</guid><description>&lt;p>Golangの変数キャプチャを勉強する。&lt;/p>
&lt;p>追記: 最初、変数キャプチャではなくメモリモデルを勉強しようとしていた。勉強してみて、求めている概念では無いことに気がついたのでタイトルなどを修正した。メモリモデル自体は知れて良かった。非同期処理へのコンパイラ最適化が及ぼす影響を知れる（&lt;a href="https://go.dev/ref/mem">公式サイト&lt;/a> におせわになった）。変数キャプチャの説明は&lt;a href="https://eli.thegreenplace.net/2019/go-internals-capturing-loop-variables-in-closures/">これ&lt;/a> を読む。３年前に僕と同じことを思ったひとがいたようだ。&lt;/p></description></item><item><title>JavaScript The Good Partsを読んだ</title><link>https://blog.nfurudono.com/posts/js-good-parts/</link><pubDate>Mon, 20 Jun 2022 19:55:28 +0900</pubDate><guid>https://blog.nfurudono.com/posts/js-good-parts/</guid><description>&lt;p>読んだ。きっかけはTypeScriptの関数型言語好き向けの紹介ページで事前知識として要求されていたから。読んでよかったと思う。しっかりJSの知れたのではないかと（その判定はまだできないが）。とはいえまだまだ知るべきGood Partsはある気がする、というのも&lt;code>const&lt;/code>とか&lt;code>let&lt;/code>が説明されていないので、情報が古いだろうと感じたから。プロトタイプの話が載っていたり、thisの動的な意味の変化のこととか、&lt;code>var&lt;/code>のスコープとかを説得力をもって説明してくれたのはとてもありがたい。そういう点で読んでよかったと思う。DOMやevent handlerなど、ブラウザ周りの話を知りたい。&lt;/p></description></item><item><title>趣味</title><link>https://blog.nfurudono.com/posts/anime/</link><pubDate>Mon, 20 Jun 2022 00:53:27 +0900</pubDate><guid>https://blog.nfurudono.com/posts/anime/</guid><description>&lt;p>心に残った作品を列挙しておく。順序に意図は無い。ちなみにこの記事はお酒によったときに書いたり追記したりしている。&lt;/p>
&lt;h2>
&lt;a href="#%e3%82%a2%e3%83%8b%e3%83%a1" id="アニメ" class="anchor" aria-hidden="true">アニメ&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>91Days&lt;/li>
&lt;li>パリピ孔明&lt;/li>
&lt;li>true tears&lt;/li>
&lt;li>天元突破グレンラガン&lt;/li>
&lt;li>マクロスデルタ（見た時期の影響が大きいかも）&lt;/li>
&lt;li>Banana Fish&lt;/li>
&lt;/ul>
&lt;p>マクロスデルタは大学受験のはじめのころ、モチベーションがない時期にみた。マクロスデルタのおかげで今の僕は自分のメンタルヘルスをある程度管理できるようになった。&lt;/p></description></item><item><title>Golangでのlog</title><link>https://blog.nfurudono.com/posts/go-log/</link><pubDate>Sun, 19 Jun 2022 18:30:06 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-log/</guid><description>&lt;p>Golangの標準ライブラリに&lt;code>log&lt;/code>がある。いろいろ関数が提供されているが、機能はざっくりいうと「引数で与えたメッセージにタイムスタンプをつけて標準エラー出力に流す」みたいな感じ。ログにレベルをつけようと思うとこれでは足りない。レベルというのは、&lt;code>DEBUG&lt;/code>とか&lt;code>ERROR&lt;/code>みたいなやつ。書くログ関数にレベルを設定した上で、グローバル変数とかで現在のレベルを設定する。プログラムを実行すると、現在のレベルで有効なログ関数だけが発火する。&lt;/p></description></item><item><title>投票所のシステム</title><link>https://blog.nfurudono.com/posts/vote/</link><pubDate>Sun, 19 Jun 2022 17:54:21 +0900</pubDate><guid>https://blog.nfurudono.com/posts/vote/</guid><description>&lt;p>選挙に行ってきた。そこで投票用紙を一枚差し出す機械を見て驚いた。あの機械が何をやっているのかは定かではないが、おそらく正確に１枚だけ投票用紙を有権者に渡すことが責務の一つなのだろう。そんな機械があるのはびっくり（皮肉を言いたいわけではない）。正確に一枚の投票用紙を渡すことは法律を遵守するために必要なことだし、機械を使わずに人の手で配る場合、複数枚渡すミスは確実に起きるだろう。なので、そこを徹底することは尤もだと思う。&lt;/p></description></item><item><title>Go Context</title><link>https://blog.nfurudono.com/posts/go-context/</link><pubDate>Sat, 18 Jun 2022 17:35:11 +0900</pubDate><guid>https://blog.nfurudono.com/posts/go-context/</guid><description>&lt;p>Golangで始めてcontextを使った。リポジトリは非公開なのであしからず。&lt;/p>
&lt;p>Webスクレイピングツールを作っている。ランディングページを見て良さげなページへのリンクを集め、それらのリンクから欲しいコンテンツを収集する、というのがメインの動き。基本的には起動したら放置するのだが、ときどきいらないページをスキップしたくなる。このスキップ機能を追加するためにcontextを使った。&lt;/p></description></item><item><title>UbuntuでIpv6を無効化する</title><link>https://blog.nfurudono.com/posts/disable-ipv6-ubuntu/</link><pubDate>Fri, 17 Jun 2022 19:13:53 +0900</pubDate><guid>https://blog.nfurudono.com/posts/disable-ipv6-ubuntu/</guid><description>&lt;p>学内ネットにVPN接続してIEEEの論文を取得しようとしたが、学内からのアクセスだと認識されなかった。
IPv6を無効化するとうまくいった。&lt;/p>
&lt;p>MacではGUIでIPv6をon/offできたが、UbuntuではCUIから設定した（&lt;a href="https://www.server-memo.net/ubuntu/ubuntu_disable_ipv6.html">参考ページ&lt;/a>）。以下を実行する。&lt;/p></description></item><item><title>Ubuntu22.04でZoomの画面共有がうまくいかなかった件</title><link>https://blog.nfurudono.com/posts/zoom-ubuntu/</link><pubDate>Wed, 15 Jun 2022 17:36:50 +0900</pubDate><guid>https://blog.nfurudono.com/posts/zoom-ubuntu/</guid><description>&lt;p>追記: 先日画面共有しようとしたところ、うまく相手に表示されなかった。
Zoomから退出して、Ubuntuにログインし直し、ウィンドウシステムをWayalndからXに切り替えたところうまくいった。やはりXが安定なのか。&lt;/p></description></item><item><title>NeoVimでクリップボードを使う</title><link>https://blog.nfurudono.com/posts/nvim-clipboard/</link><pubDate>Sun, 12 Jun 2022 11:01:45 +0900</pubDate><guid>https://blog.nfurudono.com/posts/nvim-clipboard/</guid><description>&lt;h2>
&lt;a href="#neovim-%e3%81%a7%e3%82%af%e3%83%aa%e3%83%83%e3%83%97%e3%83%9c%e3%83%bc%e3%83%89%e3%82%92%e4%bd%bf%e3%81%86" id="neovim-でクリップボードを使う" class="anchor" aria-hidden="true">NeoVim でクリップボードを使う&lt;/a>
&lt;/h2>
&lt;h2>
&lt;a href="#tldr" id="tldr" class="anchor" aria-hidden="true">TL;DR;&lt;/a>
&lt;/h2>
&lt;p>&lt;code>init.vim&lt;/code>に&lt;code>set clipboard+=unnamedplus&lt;/code>と追記する。&lt;/p>
&lt;h2>
&lt;a href="#%e9%95%b7%e3%82%81%e3%81%ae%e8%aa%ac%e6%98%8e" id="長めの説明" class="anchor" aria-hidden="true">長めの説明&lt;/a>
&lt;/h2>
&lt;p>Nvim では（vi や vim も）ヤンクやペーストで、nvim が管理するバッファを記憶領域として用いる。なのでクリップボードとは分離されていて不便なことが多い。&lt;/p></description></item><item><title>Begin Rust</title><link>https://blog.nfurudono.com/posts/begin-rust/</link><pubDate>Sat, 11 Jun 2022 12:12:24 +0900</pubDate><guid>https://blog.nfurudono.com/posts/begin-rust/</guid><description>&lt;p>Rustを勉強している。やはりライフタイムとか借用のあたりで苦労している。所有権やライフタイムはわかるのだが、借用の仕組みがイマイチわからない。特に可変な借用が同時に複数あってはならない、という規則で、同時にとは一体？という気持ちになる。同時の概念を理解させてくれる文書に出会えていない。これが原因で詰まった話をする。一応問題の回避はできたが、腑に落ちきっていない。&lt;/p></description></item><item><title>Favicon</title><link>https://blog.nfurudono.com/posts/favicon/</link><pubDate>Mon, 30 May 2022 03:06:08 +0900</pubDate><guid>https://blog.nfurudono.com/posts/favicon/</guid><description>&lt;p>ファビコンをつけてみた。素材は&lt;a href="https://jdenticon.com/#icon-nfurudono">JDENTICON&lt;/a>で生成した。それをもとにfavicon用のファイルを&lt;a href="https://www.favicon-generator.org/">Favicon.ico &amp;amp; App Icon Generator&lt;/a>で生成。&lt;/p>
&lt;p>設定はコミットを見るのが確か。&lt;a href="https://github.com/naoyafurudono/naoyafurudono.github.io/commit/8eb6ab8952ce55832f00b3aae0264d2b9c66f227">https://github.com/naoyafurudono/naoyafurudono.github.io/commit/8eb6ab8952ce55832f00b3aae0264d2b9c66f227&lt;/a>&lt;/p></description></item><item><title>ブログの設定を変えた</title><link>https://blog.nfurudono.com/posts/2022/blog-theme/</link><pubDate>Mon, 30 May 2022 02:08:10 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2022/blog-theme/</guid><description>&lt;p>このブログはGitHub Pagesで公開していて、Hugoを用いて生成している。
Hugoの設定をろくに調べずに雑に書いていたのだが、今回少しドキュメントを読んで設定をした。&lt;/p></description></item><item><title>NeoVimを使い始めた</title><link>https://blog.nfurudono.com/posts/2022/april/neovim/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.nfurudono.com/posts/2022/april/neovim/</guid><description>&lt;p>Neo Vimが使っていて楽しい、という話。普段はVSCodeを使っていて、全然移行したわけでもないのだけれど、NVimは文字入力に対する反応が比較的早くて楽しい。ところで、いつも思うのだけど、日本語って打ちにくくないだろうか。IMEがいるのが良くない（これ以上の日本語入力方式はないだろうか？手書きよりは良いのだけれど）。&lt;/p></description></item><item><title>構文エディタ実装の考え</title><link>https://blog.nfurudono.com/posts/2022/april/syntacticalz-editor/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.nfurudono.com/posts/2022/april/syntacticalz-editor/</guid><description>&lt;p>構文エディタとは、文字単位だけでなく抽象構文木単位での編集ができるエディタのこと。一般のコードでなく、プログラムを編集することは抽象構文木のノードやエッジの編集に対応する。ならば、そういう単位での編集をエディタが直接サポートすれば楽できるという発想（だと想像する）。&lt;/p></description></item><item><title>読書感想: 入門 コンピュータ科学</title><link>https://blog.nfurudono.com/posts/2022/march/intro-cs/</link><pubDate>Sat, 26 Mar 2022 11:12:44 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2022/march/intro-cs/</guid><description>&lt;p>本をざっくり読んだので感想をメモ。読んでよかった。&lt;/p>
&lt;p>読んだ本: &lt;a href="https://www.amazon.co.jp/%E5%85%A5%E9%96%80-%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E7%A7%91%E5%AD%A6-IT%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93%E3%81%A8%E7%90%86%E8%AB%96%E3%81%AE%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98-J-Glenn-Brookshear/dp/4048930540/ref=sr_1_1?keywords=%E5%85%A5%E9%96%80%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E7%A7%91%E5%AD%A6&amp;amp;qid=1648263011&amp;amp;sprefix=%E5%85%A5%E9%96%80%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%2Caps%2C296&amp;amp;sr=8-1">入門 コンピュータ科学&lt;/a>。&lt;/p>
&lt;h2>
&lt;a href="#%e6%84%9f%e6%83%b3" id="感想" class="anchor" aria-hidden="true">感想&lt;/a>
&lt;/h2>
&lt;p>おそらく情報工学科の学部で扱うであろう内容をまとめた本。プログラミングはしないけど、それ以外の座学は大体ざっくりまとまっていそう。僕は情報工学科の講義をとっていないので、真偽はわからないのだけど。あくまで内容はざっくりしていて、専門的な内容は省かれている感じ。インターネットとはとか、データベースとは、プログラミング言語とは、みたいなことが書かれていて、それぞれの難しさを指摘するところまでを解説してくれる。技術の実装方法や難しさの解決策とかは扱わない感じ（だったはず）。CS関連で知らないことが出てきた時に、どの辺を勉強すれば良いかの手がかりとなる概観を与えてくれたんだと思う。&lt;/p></description></item><item><title>My First Post</title><link>https://blog.nfurudono.com/posts/2022/march/my-first-post/</link><pubDate>Wed, 23 Mar 2022 11:41:44 +0900</pubDate><guid>https://blog.nfurudono.com/posts/2022/march/my-first-post/</guid><description>&lt;h2>
&lt;a href="#hello-hugo-and-github-pages" id="hello-hugo-and-github-pages" class="anchor" aria-hidden="true">Hello, Hugo and GitHub Pages&lt;/a>
&lt;/h2>
&lt;p>このサイトはHugoとGitHub Pagesを用いて運用しています。これらとGitHub Actionを組み合わせることで、マークダウンで記事を書いてGitHubにpushするだけで更新できるブログを構築しています。
Hugoは静的サイトジェネレータの一つで、設定を済ませたあとは、マークダウンで記事を書くことでコマンド一発でWebページのソースを生成してくれます。
GitHub PagesはGitHubに保存したコンテンツをWebページとして配信してくれるサービスです。&lt;/p></description></item></channel></rss>